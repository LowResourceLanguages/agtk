# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.36
#
# Don't modify this file, modify the SWIG interface instead.

package ag;
use base qw(Exporter);
use base qw(DynaLoader);
package agc;
bootstrap ag;
package ag;
@EXPORT = qw();

# ---------- BASE METHODS -------------

package ag;

sub TIEHASH {
    my ($classname,$obj) = @_;
    return bless $obj, $classname;
}

sub CLEAR { }

sub FIRSTKEY { }

sub NEXTKEY { }

sub FETCH {
    my ($self,$field) = @_;
    my $member_func = "swig_${field}_get";
    $self->$member_func();
}

sub STORE {
    my ($self,$field,$newval) = @_;
    my $member_func = "swig_${field}_set";
    $self->$member_func($newval);
}

sub this {
    my $ptr = shift;
    return tied(%$ptr);
}


# ------- FUNCTION WRAPPERS --------

package ag;

*CreateAGSet = *agc::CreateAGSet;
*ExistsAGSet = *agc::ExistsAGSet;
*DeleteAGSet = *agc::DeleteAGSet;
*CreateAG = *agc::CreateAG;
*ExistsAG = *agc::ExistsAG;
*DeleteAG = *agc::DeleteAG;
*GetAGIds = *agc::GetAGIds;
*CreateTimeline = *agc::CreateTimeline;
*ExistsTimeline = *agc::ExistsTimeline;
*DeleteTimeline = *agc::DeleteTimeline;
*CreateSignal = *agc::CreateSignal;
*ExistsSignal = *agc::ExistsSignal;
*DeleteSignal = *agc::DeleteSignal;
*GetSignals = *agc::GetSignals;
*GetSignalMimeClass = *agc::GetSignalMimeClass;
*GetSignalMimeType = *agc::GetSignalMimeType;
*GetSignalEncoding = *agc::GetSignalEncoding;
*GetSignalXlinkType = *agc::GetSignalXlinkType;
*GetSignalXlinkHref = *agc::GetSignalXlinkHref;
*GetSignalUnit = *agc::GetSignalUnit;
*GetSignalTrack = *agc::GetSignalTrack;
*CreateAnnotation = *agc::CreateAnnotation;
*ExistsAnnotation = *agc::ExistsAnnotation;
*DeleteAnnotation = *agc::DeleteAnnotation;
*CopyAnnotation = *agc::CopyAnnotation;
*SplitAnnotation = *agc::SplitAnnotation;
*NSplitAnnotation = *agc::NSplitAnnotation;
*GetAnnotationType = *agc::GetAnnotationType;
*GetAnnotationInfo = *agc::GetAnnotationInfo;
*GetStartAnchor = *agc::GetStartAnchor;
*GetEndAnchor = *agc::GetEndAnchor;
*SetStartAnchor = *agc::SetStartAnchor;
*SetEndAnchor = *agc::SetEndAnchor;
*GetStartOffset = *agc::GetStartOffset;
*GetEndOffset = *agc::GetEndOffset;
*SetStartOffset = *agc::SetStartOffset;
*SetEndOffset = *agc::SetEndOffset;
*GetAnnotationTypes = *agc::GetAnnotationTypes;
*GetAnnotationFeatureNames = *agc::GetAnnotationFeatureNames;
*SetFeature = *agc::SetFeature;
*ExistsFeature = *agc::ExistsFeature;
*DeleteFeature = *agc::DeleteFeature;
*GetFeature = *agc::GetFeature;
*UnsetFeature = *agc::UnsetFeature;
*GetFeatureNames = *agc::GetFeatureNames;
*SetFeatures = *agc::SetFeatures;
*GetFeatures = *agc::GetFeatures;
*UnsetFeatures = *agc::UnsetFeatures;
*CreateAnchor = *agc::CreateAnchor;
*ExistsAnchor = *agc::ExistsAnchor;
*DeleteAnchor = *agc::DeleteAnchor;
*SetAnchorOffset = *agc::SetAnchorOffset;
*GetAnchorOffset = *agc::GetAnchorOffset;
*SetOffsetUnit = *agc::SetOffsetUnit;
*GetOffsetUnit = *agc::GetOffsetUnit;
*SetAnchorSignalIds = *agc::SetAnchorSignalIds;
*GetAnchorSignalIds = *agc::GetAnchorSignalIds;
*GetAnchored = *agc::GetAnchored;
*UnsetAnchorOffset = *agc::UnsetAnchorOffset;
*SplitAnchor = *agc::SplitAnchor;
*GetIncomingAnnotationSet = *agc::GetIncomingAnnotationSet;
*GetOutgoingAnnotationSet = *agc::GetOutgoingAnnotationSet;
*GetAnchorSet = *agc::GetAnchorSet;
*GetAnchorSetByOffset = *agc::GetAnchorSetByOffset;
*GetAnchorSetNearestOffset = *agc::GetAnchorSetNearestOffset;
*GetAnnotationSet = *agc::GetAnnotationSet;
*GetAnnotationSetByFeature = *agc::GetAnnotationSetByFeature;
*GetAnnotationSetByOffset = *agc::GetAnnotationSetByOffset;
*GetAnnotationSeqByOffset = *agc::GetAnnotationSeqByOffset;
*GetAnnotationByOffset = *agc::GetAnnotationByOffset;
*GetAGSetId = *agc::GetAGSetId;
*GetAGId = *agc::GetAGId;
*GetTimelineId = *agc::GetTimelineId;
*toXML = *agc::toXML;
*LoadFromDB = *agc::LoadFromDB;
*StoreToDB = *agc::StoreToDB;
*StoreSQLs = *agc::StoreSQLs;
*SPrecedes = *agc::SPrecedes;
*Load = *agc::Load;
*Store = *agc::Store;
*Store2 = *agc::Store2;
*CheckAnchorOffsetTotal = *agc::CheckAnchorOffsetTotal;
*CheckAnchorOffsetBounded = *agc::CheckAnchorOffsetBounded;
*CheckFeatureExists = *agc::CheckFeatureExists;
*CheckFeatureIsAnnotationId = *agc::CheckFeatureIsAnnotationId;
*CheckLinear = *agc::CheckLinear;
*CheckConnected = *agc::CheckConnected;
*CheckCoextensive = *agc::CheckCoextensive;
*CheckSpan = *agc::CheckSpan;
*tree_init_tree = *agc::tree_init_tree;
*tree_move_down = *agc::tree_move_down;
*tree_move_up = *agc::tree_move_up;
*tree_promote_right = *agc::tree_promote_right;
*tree_promote_left = *agc::tree_promote_left;
*tree_demote_right = *agc::tree_demote_right;
*tree_demote_left = *agc::tree_demote_left;
*tree_first_tree = *agc::tree_first_tree;
*tree_last_tree = *agc::tree_last_tree;
*tree_move = *agc::tree_move;
*tree_insert_node_left = *agc::tree_insert_node_left;
*tree_insert_node_right = *agc::tree_insert_node_right;
*tree_delete_node_left = *agc::tree_delete_node_left;
*tree_delete_node_right = *agc::tree_delete_node_right;
*tree_root = *agc::tree_root;
*tree_parent = *agc::tree_parent;
*tree_children = *agc::tree_children;
*tree_left = *agc::tree_left;
*tree_right = *agc::tree_right;
*tree_path = *agc::tree_path;
*tree_common_ancestor = *agc::tree_common_ancestor;
*tree_insert_node = *agc::tree_insert_node;
*tree_delete_node = *agc::tree_delete_node;

# ------- VARIABLE STUBS --------

package ag;

1;
