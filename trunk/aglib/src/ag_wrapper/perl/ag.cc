/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.19
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */


#ifdef __cplusplus
template<class T> class SwigValueWrapper {
    T *tt;
public:
    inline SwigValueWrapper() : tt(0) { }
    inline ~SwigValueWrapper() { if (tt) delete tt; } 
    inline SwigValueWrapper& operator=(const T& t) { tt = new T(t); return *this; }
    inline operator T&() const { return *tt; }
    inline T *operator&() { return tt; }
};                                                    
#endif

/***********************************************************************
 * common.swg
 *
 *     This file contains generic SWIG runtime support for pointer
 *     type checking as well as a few commonly used macros to control
 *     external linkage.
 *
 * Author : David Beazley (beazley@cs.uchicago.edu)
 *
 * Copyright (c) 1999-2000, The University of Chicago
 * 
 * This file may be freely redistributed without license or fee provided
 * this copyright message remains intact.
 ************************************************************************/

#include <string.h>

#if defined(_WIN32) || defined(__WIN32__)
#       if defined(_MSC_VER)
#               if defined(STATIC_LINKED)
#                       define SWIGEXPORT(a) a
#                       define SWIGIMPORT(a) extern a
#               else
#                       define SWIGEXPORT(a) __declspec(dllexport) a
#                       define SWIGIMPORT(a) extern a
#               endif
#       else
#               if defined(__BORLANDC__)
#                       define SWIGEXPORT(a) a _export
#                       define SWIGIMPORT(a) a _export
#               else
#                       define SWIGEXPORT(a) a
#                       define SWIGIMPORT(a) a
#               endif
#       endif
#else
#       define SWIGEXPORT(a) a
#       define SWIGIMPORT(a) a
#endif

#ifdef SWIG_GLOBAL
#define SWIGRUNTIME(a) SWIGEXPORT(a)
#else
#define SWIGRUNTIME(a) static a
#endif

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

typedef struct swig_type_info {
  const char             *name;                 
  swig_converter_func     converter;
  const char             *str;
  void                   *clientdata;	
  swig_dycast_func        dcast;
  struct swig_type_info  *next;
  struct swig_type_info  *prev;
} swig_type_info;

#ifdef SWIG_NOINCLUDE

SWIGIMPORT(swig_type_info *) SWIG_TypeRegister(swig_type_info *);
SWIGIMPORT(swig_type_info *) SWIG_TypeCheck(char *c, swig_type_info *);
SWIGIMPORT(void *)           SWIG_TypeCast(swig_type_info *, void *);
SWIGIMPORT(swig_type_info *) SWIG_TypeDynamicCast(swig_type_info *, void **);
SWIGIMPORT(const char *)     SWIG_TypeName(const swig_type_info *);
SWIGIMPORT(swig_type_info *) SWIG_TypeQuery(const char *);
SWIGIMPORT(void)             SWIG_TypeClientData(swig_type_info *, void *);

#else

static swig_type_info *swig_type_list = 0;

/* Register a type mapping with the type-checking */
SWIGRUNTIME(swig_type_info *)
SWIG_TypeRegister(swig_type_info *ti)
{
  swig_type_info *tc, *head, *ret, *next;
  /* Check to see if this type has already been registered */
  tc = swig_type_list;
  while (tc) {
    if (strcmp(tc->name, ti->name) == 0) {
      /* Already exists in the table.  Just add additional types to the list */
      if (tc->clientdata) ti->clientdata = tc->clientdata;	
      head = tc;
      next = tc->next;
      goto l1;
    }
    tc = tc->prev;
  }
  head = ti;
  next = 0;

  /* Place in list */
  ti->prev = swig_type_list;
  swig_type_list = ti;

  /* Build linked lists */
 l1:
  ret = head;
  tc = ti + 1;
  /* Patch up the rest of the links */
  while (tc->name) {
    head->next = tc;
    tc->prev = head;
    head = tc;
    tc++;
  }
  if (next) next->prev = head;  /**/
  head->next = next;
  return ret;
}

/* Check the typename */
SWIGRUNTIME(swig_type_info *) 
SWIG_TypeCheck(char *c, swig_type_info *ty)
{
  swig_type_info *s;
  if (!ty) return 0;        /* Void pointer */
  s = ty->next;             /* First element always just a name */
  do {
    if (strcmp(s->name,c) == 0) {
      if (s == ty->next) return s;
      /* Move s to the top of the linked list */
      s->prev->next = s->next;
      if (s->next) {
	s->next->prev = s->prev;
      }
      /* Insert s as second element in the list */
      s->next = ty->next;
      if (ty->next) ty->next->prev = s;
      ty->next = s;
      s->prev = ty;  /**/
      return s;
    }
    s = s->next;
  } while (s && (s != ty->next));
  return 0;
}

/* Cast a pointer up an inheritance hierarchy */
SWIGRUNTIME(void *) 
SWIG_TypeCast(swig_type_info *ty, void *ptr) 
{
  if ((!ty) || (!ty->converter)) return ptr;
  return (*ty->converter)(ptr);
}

/* Dynamic pointer casting. Down an inheritance hierarchy */
SWIGRUNTIME(swig_type_info *) 
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) 
{
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
     ty = (*ty->dcast)(ptr);
     if (ty) lastty = ty;
  }
  return lastty;
}

/* Return the name associated with this type */
SWIGRUNTIME(const char *)
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/* Search for a swig_type_info structure */
SWIGRUNTIME(swig_type_info *)
SWIG_TypeQuery(const char *name) {
  swig_type_info *ty = swig_type_list;
  while (ty) {
    if (ty->str && (strcmp(name,ty->str) == 0)) return ty;
    if (ty->name && (strcmp(name,ty->name) == 0)) return ty;
    ty = ty->prev;
  }
  return 0;
}

/* Set the clientdata field for a type */
SWIGRUNTIME(void)
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_type_info *tc, *equiv;
  if (ti->clientdata == clientdata) return;
  ti->clientdata = clientdata;
  equiv = ti->next;
  while (equiv) {
    if (!equiv->converter) {
      tc = swig_type_list;
      while (tc) {
	if ((strcmp(tc->name, equiv->name) == 0))
	  SWIG_TypeClientData(tc,clientdata);
	tc = tc->prev;
      }
    }
    equiv = equiv->next;
  }
}
#endif

#ifdef __cplusplus
}

#endif

/* -----------------------------------------------------------------------------
 * perl5.swg
 *
 * Perl5 runtime library
 * $Header: /cvsroot/agtk/AGLIB/src/ag_wrapper/perl/Attic/ag.cc,v 1.1.2.1 2003/07/03 20:44:40 haepal Exp $
 * ----------------------------------------------------------------------------- */

#define SWIGPERL
#define SWIGPERL5
#ifdef __cplusplus
/* Needed on some windows machines---since MS plays funny
   games with the header files under C++ */
#include <math.h>
#include <stdlib.h>
extern "C" {
#endif
#include "EXTERN.h"
#include "perl.h"
#include "XSUB.h"

/* Get rid of free and malloc defined by perl */
#undef free
#undef malloc

#ifndef pTHX_
#define pTHX_
#endif

#include <string.h>
#ifdef __cplusplus
}
#endif

/* Macro to call an XS function */

#ifdef PERL_OBJECT 
#define SWIG_CALLXS(_name) _name(cv,pPerl) 
#else 
#ifndef MULTIPLICITY 
#define SWIG_CALLXS(_name) _name(cv) 
#else 
#define SWIG_CALLXS(_name) _name(PERL_GET_THX, cv) 
#endif 
#endif 

/* Macros for low-level exception handling */
#define SWIG_fail      goto fail
#define SWIG_croak(x)  { if ((_swigerr = (const char *) x)) goto fail; }
#define SWIG_MAX_ERRMSG 256

/* Note: SwigMagicFuncHack is a typedef used to get the C++
   compiler to just shut up already */

#ifdef PERL_OBJECT
#define MAGIC_PPERL  CPerlObj *pPerl = (CPerlObj *) this;
typedef int (CPerlObj::*SwigMagicFunc)(SV *, MAGIC *);

#ifdef __cplusplus
extern "C" {
#endif
typedef int (CPerlObj::*SwigMagicFuncHack)(SV *, MAGIC *);
#ifdef __cplusplus
}
#endif

#define SWIG_MAGIC(a,b) (SV *a, MAGIC *b)
#define SWIGCLASS_STATIC
#else
#define MAGIC_PPERL
#define SWIGCLASS_STATIC static
#ifndef MULTIPLICITY
#define SWIG_MAGIC(a,b) (SV *a, MAGIC *b)
typedef int (*SwigMagicFunc)(SV *, MAGIC *);

#ifdef __cplusplus
extern "C" {
#endif
typedef int (*SwigMagicFuncHack)(SV *, MAGIC *);
#ifdef __cplusplus
}
#endif


#else
#define SWIG_MAGIC(a,b) (struct interpreter *interp, SV *a, MAGIC *b)
typedef int (*SwigMagicFunc)(struct interpreter *, SV *, MAGIC *);
#ifdef __cplusplus
extern "C" {
#endif
typedef int (*SwigMagicFuncHack)(struct interpreter *, SV *, MAGIC *);
#ifdef __cplusplus
}
#endif

#endif
#endif

#if defined(WIN32) && defined(PERL_OBJECT) && !defined(PerlIO_exportFILE)
#define PerlIO_exportFILE(fh,fl) (FILE*)(fh)
#endif

/* Modifications for newer Perl 5.005 releases */

#if !defined(PERL_REVISION) || ((PERL_REVISION >= 5) && ((PERL_VERSION < 5) || ((PERL_VERSION == 5) && (PERL_SUBVERSION < 50))))
#ifndef PL_sv_yes
#define PL_sv_yes sv_yes
#endif
#ifndef PL_sv_undef
#define PL_sv_undef sv_undef
#endif
#ifndef PL_na
#define PL_na na
#endif
#endif

#include <stdlib.h>

#ifdef __cplusplus
extern "C" {
#endif

#ifdef SWIG_NOINCLUDE

#ifndef PERL_OBJECT
extern int SWIG_ConvertPtr(SV *, void **, swig_type_info *, int flags);
extern void SWIG_MakePtr(SV *, void *, swig_type_info *, int flags);
#else
extern int _SWIG_ConvertPtr(CPerlObj *, SV *, void **, swig_type_info *,int flags);
extern void _SWIG_MakePtr(CPerlObj *, SV *, void *, swig_type_info *, int flags);
#define SWIG_ConvertPtr(a,b,c,d) _SWIG_ConvertPtr(pPerl,a,b,c,d)
#define SWIG_MakePtr(a,b,c,d) _SWIG_MakePtr(pPerl,a,b,c,d)
#endif

#else

/* Function for getting a pointer value */

#ifndef PERL_OBJECT
SWIGRUNTIME(int) 
SWIG_ConvertPtr(SV *sv, void **ptr, swig_type_info *_t, int flags)
#else
#define SWIG_ConvertPtr(a,b,c,d) _SWIG_ConvertPtr(pPerl,a,b,c,d)
SWIGRUNTIME(int)
_SWIG_ConvertPtr(CPerlObj *pPerl, SV *sv, void **ptr, swig_type_info *_t, int flags)
#endif
{
  char *_c;
  swig_type_info *tc;
  IV   tmp;

  /* If magical, apply more magic */
  if (SvGMAGICAL(sv))
    mg_get(sv);

  /* Check to see if this is an object */
  if (sv_isobject(sv)) {
    SV *tsv = (SV*) SvRV(sv);
    if ((SvTYPE(tsv) == SVt_PVHV)) {
      MAGIC *mg;
      if (SvMAGICAL(tsv)) {
	mg = mg_find(tsv,'P');
	if (mg) {
	  SV *rsv = mg->mg_obj;
	  if (sv_isobject(rsv)) {
	    tmp = SvIV((SV*)SvRV(rsv));
	  }
	}
      } else {
	return -1;
      }
    } else {
      tmp = SvIV((SV*)SvRV(sv));
    }
    if (!_t) {
      *(ptr) = (void *) tmp;
      return 0;
    }
  } else if (! SvOK(sv)) {            /* Check for undef */
    *(ptr) = (void *) 0;
    return 0;
  } else if (SvTYPE(sv) == SVt_RV) {  /* Check for NULL pointer */
    *(ptr) = (void *) 0;
    if (!SvROK(sv)) 
      return 0;
    else
      return -1;
  } else {                            /* Don't know what it is */
      *(ptr) = (void *) 0;
      return -1;
  }
  if (_t) {
    /* Now see if the types match */      
    _c = HvNAME(SvSTASH(SvRV(sv)));
    tc = SWIG_TypeCheck(_c,_t);
    if (!tc) {
      *ptr = (void *) tmp;
      return -1;
    }
    *ptr = SWIG_TypeCast(tc,(void *)tmp);
    return 0;
  }
  *ptr = (void *) tmp;
  return 0;
}
#ifndef PERL_OBJECT
SWIGRUNTIME(void) 
SWIG_MakePtr(SV *sv, void *ptr, swig_type_info *t,int flags)
#else
#define SWIG_MakePtr(a,b,c,d) _SWIG_MakePtr(pPerl,a,b,c,d)
SWIGRUNTIME(void)
_SWIG_MakePtr(CPerlObj *pPerl, SV *sv, void *ptr, swig_type_info *t, int flags)
#endif
{
  sv_setref_pv(sv, (char *) t->name, ptr);
}

#endif

typedef XS(SwigPerlWrapper);
typedef SwigPerlWrapper *SwigPerlWrapperPtr;

/* Structure for command table */
typedef struct {
  const char         *name;
  SwigPerlWrapperPtr  wrapper;
} swig_command_info;

/* Information for constant table */

#define SWIG_INT     1
#define SWIG_FLOAT   2
#define SWIG_STRING  3
#define SWIG_POINTER 4
#define SWIG_BINARY  5

/* Constant information structure */
typedef struct swig_constant_info {
    int              type;
    const char      *name;
    long             lvalue;
    double           dvalue;
    void            *pvalue;
    swig_type_info **ptype;
} swig_constant_info;

#ifdef __cplusplus
}
#endif

/* Structure for variable table */
typedef struct {
  const char   *name;
  SwigMagicFunc   set;
  SwigMagicFunc   get;
  swig_type_info  **type;
} swig_variable_info;

/* Magic variable code */
#ifndef PERL_OBJECT
#define swig_create_magic(s,a,b,c) _swig_create_magic(s,a,b,c)
  #ifndef MULTIPLICITY 
       static void _swig_create_magic(SV *sv, char *name, int (*set)(SV *, MAGIC *), int \
(*get)(SV *,MAGIC *)) { 
  #else 
       static void _swig_create_magic(SV *sv, char *name, int (*set)(struct interpreter*,\
 SV *, MAGIC *), int (*get)(struct interpreter*, SV *,MAGIC *)) { 
  #endif 
#else
#define swig_create_magic(s,a,b,c) _swig_create_magic(pPerl,s,a,b,c)
static void _swig_create_magic(CPerlObj *pPerl, SV *sv, const char *name, int (CPerlObj::*set)(SV *, MAGIC *), int (CPerlObj::*get)(SV *, MAGIC *)) {
#endif
  MAGIC *mg;
  sv_magic(sv,sv,'U',(char *) name,strlen(name));
  mg = mg_find(sv,'U');
  mg->mg_virtual = (MGVTBL *) malloc(sizeof(MGVTBL));
  mg->mg_virtual->svt_get = (SwigMagicFuncHack) get;
  mg->mg_virtual->svt_set = (SwigMagicFuncHack) set;
  mg->mg_virtual->svt_len = 0;
  mg->mg_virtual->svt_clear = 0;
  mg->mg_virtual->svt_free = 0;
}






#ifdef do_open
  #undef do_open
#endif
#ifdef do_close
  #undef do_close
#endif
#ifdef scalar
  #undef scalar
#endif
#ifdef list
  #undef list
#endif
#ifdef apply
  #undef apply
#endif
#ifdef convert
  #undef convert
#endif
#ifdef Error
  #undef Error
#endif
#ifdef form
  #undef form
#endif
#ifdef vform
  #undef vform
#endif
#ifdef LABEL
  #undef LABEL
#endif
#ifdef METHOD
  #undef METHOD
#endif
#ifdef Move
  #undef Move
#endif
#ifdef yylex
  #undef yylex
#endif
#ifdef yyparse
  #undef yyparse
#endif
#ifdef yyerror
  #undef yyerror
#endif
#ifdef invert
  #undef invert
#endif
#ifdef ref
  #undef ref
#endif


/* -------- TYPES TABLE (BEGIN) -------- */

#define  SWIGTYPE_p_mapTstd__string_std__string_t swig_types[0] 
#define  SWIGTYPE_p_setTstd__string_t swig_types[1] 
#define  SWIGTYPE_p_listTstd__string_t swig_types[2] 
static swig_type_info *swig_types[4];

/* -------- TYPES TABLE (END) -------- */

#define SWIG_init    boot_ag

#define SWIG_name   "ag::boot_ag"
#define SWIG_prefix "ag::"

#ifdef __cplusplus
extern "C"
#endif
#ifndef PERL_OBJECT
#ifndef MULTIPLICITY
SWIGEXPORT(void) SWIG_init (CV* cv);
#else
SWIGEXPORT(void) SWIG_init (pTHXo_ CV* cv);
#endif
#else
SWIGEXPORT(void) SWIG_init (CV *cv, CPerlObj *);
#endif


#include <ag/AGAPI.h>
#include <ag/AGException.h>
#include <ag/agfio.h>


#define  SWIG_MemoryError    1
#define  SWIG_IOError        2
#define  SWIG_RuntimeError   3
#define  SWIG_IndexError     4
#define  SWIG_TypeError      5
#define  SWIG_DivisionByZero 6
#define  SWIG_OverflowError  7
#define  SWIG_SyntaxError    8
#define  SWIG_ValueError     9
#define  SWIG_SystemError   10
#define  SWIG_UnknownError  99


#define SWIG_exception(a,b)   SWIG_croak(b)


#include <string>


static void array_to_list(AV* av, list<string>& output)
{
    SV** tv;
    I32 len = av_len(av) + 1;
    for (I32 i=0; i<len; ++i) {
        tv = av_fetch(av, i, 0);
        const char *ptr = SvPV_nolen(*tv);
        output.push_back(ptr);
    }
}

static void list_to_array(list<string>& input, AV* av)
{
    list<string>::iterator pos = input.begin();
    for (; pos != input.end(); ++pos)
        av_push(av, newSVpv(pos->c_str(),pos->size()));
}

static void array_to_set(AV* av, set<string>& output)
{
    SV** tv;
    I32 len = av_len(av) + 1;
    for (I32 i=0; i<len; ++i) {
        tv = av_fetch(av, i, 0);
        const char *ptr = SvPV_nolen(*tv);
        output.insert(ptr);
    }
}

static void set_to_array(set<string>& input, AV* av)
{
    set<string>::iterator pos = input.begin();
    for (; pos != input.end(); ++pos)
        av_push(av, newSVpv(pos->c_str(),pos->size()));
}

static void hash_to_map(HV* hv, map<string,string>& output)
{
    hv_iterinit(hv);
    HE* entry;
    STRLEN l;
    while (entry=hv_iternext(hv)) {
        output[HePV(entry,l)] = SvPV_nolen(HeVAL(entry));
    }
}

static void map_to_hash(map<string,string>& input, HV* hv)
{
    map<string,string>::iterator pos = input.begin();
    for (; pos!=input.end(); ++pos) {
        hv_store(hv,
                 pos->first.c_str(), pos->first.size(),
                 newSVpv(pos->second.c_str(),pos->second.size()),
                 0);
    }
}



#include <ag/agtree.h>

#ifdef PERL_OBJECT
#define MAGIC_CLASS _wrap_ag_var::
class _wrap_ag_var : public CPerlObj {
public:
#else
#define MAGIC_CLASS
#endif
SWIGCLASS_STATIC int swig_magic_readonly(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    sv = sv; mg = mg;
    croak("Value is read-only.");
    return 0;
}


#ifdef PERL_OBJECT
};
#endif

#ifdef __cplusplus
extern "C" {
#endif
XS(_wrap_CreateAGSet) {
    char _swigmsg[SWIG_MAX_ERRMSG] = "";
    const char *_swigerr = _swigmsg;
    {
        std::string arg1 ;
        std::string result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CreateAGSet(std::string);");
        }
        {
            if (!SvPOK((SV*) ST(0))) {
                SWIG_croak("Type error in argument 1 of CreateAGSet. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(0), len);
                (&arg1)->assign(ptr, len);
            }
        }
        {
            try {
                result = CreateAGSet(arg1);
                
            }
            catch (AGException& err) {
                string message = "AGException\x01";
                message += err.error();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::LoadError& err) {
                string message = "LoadError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::StoreError& err) {
                string message = "StoreError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
        }
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        (void) _swigerr;
    }
    croak(_swigerr);
}


XS(_wrap_ExistsAGSet) {
    char _swigmsg[SWIG_MAX_ERRMSG] = "";
    const char *_swigerr = _swigmsg;
    {
        std::string arg1 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: ExistsAGSet(std::string);");
        }
        {
            if (!SvPOK((SV*) ST(0))) {
                SWIG_croak("Type error in argument 1 of ExistsAGSet. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(0), len);
                (&arg1)->assign(ptr, len);
            }
        }
        {
            try {
                result = (bool)ExistsAGSet(arg1);
                
            }
            catch (AGException& err) {
                string message = "AGException\x01";
                message += err.error();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::LoadError& err) {
                string message = "LoadError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::StoreError& err) {
                string message = "StoreError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        (void) _swigerr;
    }
    croak(_swigerr);
}


XS(_wrap_DeleteAGSet) {
    char _swigmsg[SWIG_MAX_ERRMSG] = "";
    const char *_swigerr = _swigmsg;
    {
        std::string arg1 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DeleteAGSet(std::string);");
        }
        {
            if (!SvPOK((SV*) ST(0))) {
                SWIG_croak("Type error in argument 1 of DeleteAGSet. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(0), len);
                (&arg1)->assign(ptr, len);
            }
        }
        {
            try {
                DeleteAGSet(arg1);
                
            }
            catch (AGException& err) {
                string message = "AGException\x01";
                message += err.error();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::LoadError& err) {
                string message = "LoadError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::StoreError& err) {
                string message = "StoreError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
        }
        
        XSRETURN(argvi);
        fail:
        (void) _swigerr;
    }
    croak(_swigerr);
}


XS(_wrap_CreateAG) {
    char _swigmsg[SWIG_MAX_ERRMSG] = "";
    const char *_swigerr = _swigmsg;
    {
        std::string arg1 ;
        std::string arg2 ;
        std::string result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CreateAG(std::string,std::string);");
        }
        {
            if (!SvPOK((SV*) ST(0))) {
                SWIG_croak("Type error in argument 1 of CreateAG. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(0), len);
                (&arg1)->assign(ptr, len);
            }
        }
        {
            if (!SvPOK((SV*) ST(1))) {
                SWIG_croak("Type error in argument 2 of CreateAG. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(1), len);
                (&arg2)->assign(ptr, len);
            }
        }
        {
            try {
                result = CreateAG(arg1,arg2);
                
            }
            catch (AGException& err) {
                string message = "AGException\x01";
                message += err.error();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::LoadError& err) {
                string message = "LoadError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::StoreError& err) {
                string message = "StoreError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
        }
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        (void) _swigerr;
    }
    croak(_swigerr);
}


XS(_wrap_ExistsAG) {
    char _swigmsg[SWIG_MAX_ERRMSG] = "";
    const char *_swigerr = _swigmsg;
    {
        std::string arg1 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: ExistsAG(std::string);");
        }
        {
            if (!SvPOK((SV*) ST(0))) {
                SWIG_croak("Type error in argument 1 of ExistsAG. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(0), len);
                (&arg1)->assign(ptr, len);
            }
        }
        {
            try {
                result = (bool)ExistsAG(arg1);
                
            }
            catch (AGException& err) {
                string message = "AGException\x01";
                message += err.error();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::LoadError& err) {
                string message = "LoadError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::StoreError& err) {
                string message = "StoreError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        (void) _swigerr;
    }
    croak(_swigerr);
}


XS(_wrap_DeleteAG) {
    char _swigmsg[SWIG_MAX_ERRMSG] = "";
    const char *_swigerr = _swigmsg;
    {
        std::string arg1 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DeleteAG(std::string);");
        }
        {
            if (!SvPOK((SV*) ST(0))) {
                SWIG_croak("Type error in argument 1 of DeleteAG. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(0), len);
                (&arg1)->assign(ptr, len);
            }
        }
        {
            try {
                DeleteAG(arg1);
                
            }
            catch (AGException& err) {
                string message = "AGException\x01";
                message += err.error();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::LoadError& err) {
                string message = "LoadError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::StoreError& err) {
                string message = "StoreError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
        }
        
        XSRETURN(argvi);
        fail:
        (void) _swigerr;
    }
    croak(_swigerr);
}


XS(_wrap_GetAGIds) {
    char _swigmsg[SWIG_MAX_ERRMSG] = "";
    const char *_swigerr = _swigmsg;
    {
        std::string arg1 ;
        set<std::string > result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: GetAGIds(std::string);");
        }
        {
            if (!SvPOK((SV*) ST(0))) {
                SWIG_croak("Type error in argument 1 of GetAGIds. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(0), len);
                (&arg1)->assign(ptr, len);
            }
        }
        {
            try {
                result = GetAGIds(arg1);
                
            }
            catch (AGException& err) {
                string message = "AGException\x01";
                message += err.error();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::LoadError& err) {
                string message = "LoadError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::StoreError& err) {
                string message = "StoreError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
        }
        {
            AV* arr = newAV();
            set_to_array(result, arr);
            ST(argvi) = newRV_noinc((SV*)arr);
            sv_2mortal(ST(argvi));    // don't know why
            argvi++;    // seems to signal the existence of a return value
        }
        XSRETURN(argvi);
        fail:
        (void) _swigerr;
    }
    croak(_swigerr);
}


XS(_wrap_CreateTimeline) {
    char _swigmsg[SWIG_MAX_ERRMSG] = "";
    const char *_swigerr = _swigmsg;
    {
        std::string arg1 ;
        std::string result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CreateTimeline(std::string);");
        }
        {
            if (!SvPOK((SV*) ST(0))) {
                SWIG_croak("Type error in argument 1 of CreateTimeline. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(0), len);
                (&arg1)->assign(ptr, len);
            }
        }
        {
            try {
                result = CreateTimeline(arg1);
                
            }
            catch (AGException& err) {
                string message = "AGException\x01";
                message += err.error();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::LoadError& err) {
                string message = "LoadError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::StoreError& err) {
                string message = "StoreError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
        }
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        (void) _swigerr;
    }
    croak(_swigerr);
}


XS(_wrap_ExistsTimeline) {
    char _swigmsg[SWIG_MAX_ERRMSG] = "";
    const char *_swigerr = _swigmsg;
    {
        std::string arg1 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: ExistsTimeline(std::string);");
        }
        {
            if (!SvPOK((SV*) ST(0))) {
                SWIG_croak("Type error in argument 1 of ExistsTimeline. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(0), len);
                (&arg1)->assign(ptr, len);
            }
        }
        {
            try {
                result = (bool)ExistsTimeline(arg1);
                
            }
            catch (AGException& err) {
                string message = "AGException\x01";
                message += err.error();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::LoadError& err) {
                string message = "LoadError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::StoreError& err) {
                string message = "StoreError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        (void) _swigerr;
    }
    croak(_swigerr);
}


XS(_wrap_DeleteTimeline) {
    char _swigmsg[SWIG_MAX_ERRMSG] = "";
    const char *_swigerr = _swigmsg;
    {
        std::string arg1 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DeleteTimeline(std::string);");
        }
        {
            if (!SvPOK((SV*) ST(0))) {
                SWIG_croak("Type error in argument 1 of DeleteTimeline. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(0), len);
                (&arg1)->assign(ptr, len);
            }
        }
        {
            try {
                DeleteTimeline(arg1);
                
            }
            catch (AGException& err) {
                string message = "AGException\x01";
                message += err.error();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::LoadError& err) {
                string message = "LoadError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::StoreError& err) {
                string message = "StoreError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
        }
        
        XSRETURN(argvi);
        fail:
        (void) _swigerr;
    }
    croak(_swigerr);
}


XS(_wrap_CreateSignal) {
    char _swigmsg[SWIG_MAX_ERRMSG] = "";
    const char *_swigerr = _swigmsg;
    {
        std::string arg1 ;
        std::string arg2 ;
        std::string arg3 ;
        std::string arg4 ;
        std::string arg5 ;
        std::string arg6 ;
        std::string arg7 ;
        std::string result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 7) || (items > 7)) {
            SWIG_croak("Usage: CreateSignal(std::string,std::string,std::string,std::string,std::string,std::string,std::string);");
        }
        {
            if (!SvPOK((SV*) ST(0))) {
                SWIG_croak("Type error in argument 1 of CreateSignal. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(0), len);
                (&arg1)->assign(ptr, len);
            }
        }
        {
            if (!SvPOK((SV*) ST(1))) {
                SWIG_croak("Type error in argument 2 of CreateSignal. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(1), len);
                (&arg2)->assign(ptr, len);
            }
        }
        {
            if (!SvPOK((SV*) ST(2))) {
                SWIG_croak("Type error in argument 3 of CreateSignal. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(2), len);
                (&arg3)->assign(ptr, len);
            }
        }
        {
            if (!SvPOK((SV*) ST(3))) {
                SWIG_croak("Type error in argument 4 of CreateSignal. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(3), len);
                (&arg4)->assign(ptr, len);
            }
        }
        {
            if (!SvPOK((SV*) ST(4))) {
                SWIG_croak("Type error in argument 5 of CreateSignal. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(4), len);
                (&arg5)->assign(ptr, len);
            }
        }
        {
            if (!SvPOK((SV*) ST(5))) {
                SWIG_croak("Type error in argument 6 of CreateSignal. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(5), len);
                (&arg6)->assign(ptr, len);
            }
        }
        {
            if (!SvPOK((SV*) ST(6))) {
                SWIG_croak("Type error in argument 7 of CreateSignal. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(6), len);
                (&arg7)->assign(ptr, len);
            }
        }
        {
            try {
                result = CreateSignal(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
                
            }
            catch (AGException& err) {
                string message = "AGException\x01";
                message += err.error();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::LoadError& err) {
                string message = "LoadError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::StoreError& err) {
                string message = "StoreError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
        }
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        (void) _swigerr;
    }
    croak(_swigerr);
}


XS(_wrap_ExistsSignal) {
    char _swigmsg[SWIG_MAX_ERRMSG] = "";
    const char *_swigerr = _swigmsg;
    {
        std::string arg1 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: ExistsSignal(std::string);");
        }
        {
            if (!SvPOK((SV*) ST(0))) {
                SWIG_croak("Type error in argument 1 of ExistsSignal. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(0), len);
                (&arg1)->assign(ptr, len);
            }
        }
        {
            try {
                result = (bool)ExistsSignal(arg1);
                
            }
            catch (AGException& err) {
                string message = "AGException\x01";
                message += err.error();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::LoadError& err) {
                string message = "LoadError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::StoreError& err) {
                string message = "StoreError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        (void) _swigerr;
    }
    croak(_swigerr);
}


XS(_wrap_DeleteSignal) {
    char _swigmsg[SWIG_MAX_ERRMSG] = "";
    const char *_swigerr = _swigmsg;
    {
        std::string arg1 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DeleteSignal(std::string);");
        }
        {
            if (!SvPOK((SV*) ST(0))) {
                SWIG_croak("Type error in argument 1 of DeleteSignal. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(0), len);
                (&arg1)->assign(ptr, len);
            }
        }
        {
            try {
                DeleteSignal(arg1);
                
            }
            catch (AGException& err) {
                string message = "AGException\x01";
                message += err.error();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::LoadError& err) {
                string message = "LoadError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::StoreError& err) {
                string message = "StoreError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
        }
        
        XSRETURN(argvi);
        fail:
        (void) _swigerr;
    }
    croak(_swigerr);
}


XS(_wrap_GetSignals) {
    char _swigmsg[SWIG_MAX_ERRMSG] = "";
    const char *_swigerr = _swigmsg;
    {
        std::string arg1 ;
        set<std::string > result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: GetSignals(std::string);");
        }
        {
            if (!SvPOK((SV*) ST(0))) {
                SWIG_croak("Type error in argument 1 of GetSignals. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(0), len);
                (&arg1)->assign(ptr, len);
            }
        }
        {
            try {
                result = GetSignals(arg1);
                
            }
            catch (AGException& err) {
                string message = "AGException\x01";
                message += err.error();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::LoadError& err) {
                string message = "LoadError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::StoreError& err) {
                string message = "StoreError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
        }
        {
            AV* arr = newAV();
            set_to_array(result, arr);
            ST(argvi) = newRV_noinc((SV*)arr);
            sv_2mortal(ST(argvi));    // don't know why
            argvi++;    // seems to signal the existence of a return value
        }
        XSRETURN(argvi);
        fail:
        (void) _swigerr;
    }
    croak(_swigerr);
}


XS(_wrap_GetSignalMimeClass) {
    char _swigmsg[SWIG_MAX_ERRMSG] = "";
    const char *_swigerr = _swigmsg;
    {
        std::string arg1 ;
        std::string result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: GetSignalMimeClass(std::string);");
        }
        {
            if (!SvPOK((SV*) ST(0))) {
                SWIG_croak("Type error in argument 1 of GetSignalMimeClass. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(0), len);
                (&arg1)->assign(ptr, len);
            }
        }
        {
            try {
                result = GetSignalMimeClass(arg1);
                
            }
            catch (AGException& err) {
                string message = "AGException\x01";
                message += err.error();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::LoadError& err) {
                string message = "LoadError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::StoreError& err) {
                string message = "StoreError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
        }
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        (void) _swigerr;
    }
    croak(_swigerr);
}


XS(_wrap_GetSignalMimeType) {
    char _swigmsg[SWIG_MAX_ERRMSG] = "";
    const char *_swigerr = _swigmsg;
    {
        std::string arg1 ;
        std::string result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: GetSignalMimeType(std::string);");
        }
        {
            if (!SvPOK((SV*) ST(0))) {
                SWIG_croak("Type error in argument 1 of GetSignalMimeType. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(0), len);
                (&arg1)->assign(ptr, len);
            }
        }
        {
            try {
                result = GetSignalMimeType(arg1);
                
            }
            catch (AGException& err) {
                string message = "AGException\x01";
                message += err.error();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::LoadError& err) {
                string message = "LoadError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::StoreError& err) {
                string message = "StoreError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
        }
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        (void) _swigerr;
    }
    croak(_swigerr);
}


XS(_wrap_GetSignalEncoding) {
    char _swigmsg[SWIG_MAX_ERRMSG] = "";
    const char *_swigerr = _swigmsg;
    {
        std::string arg1 ;
        std::string result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: GetSignalEncoding(std::string);");
        }
        {
            if (!SvPOK((SV*) ST(0))) {
                SWIG_croak("Type error in argument 1 of GetSignalEncoding. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(0), len);
                (&arg1)->assign(ptr, len);
            }
        }
        {
            try {
                result = GetSignalEncoding(arg1);
                
            }
            catch (AGException& err) {
                string message = "AGException\x01";
                message += err.error();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::LoadError& err) {
                string message = "LoadError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::StoreError& err) {
                string message = "StoreError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
        }
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        (void) _swigerr;
    }
    croak(_swigerr);
}


XS(_wrap_GetSignalXlinkType) {
    char _swigmsg[SWIG_MAX_ERRMSG] = "";
    const char *_swigerr = _swigmsg;
    {
        std::string arg1 ;
        std::string result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: GetSignalXlinkType(std::string);");
        }
        {
            if (!SvPOK((SV*) ST(0))) {
                SWIG_croak("Type error in argument 1 of GetSignalXlinkType. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(0), len);
                (&arg1)->assign(ptr, len);
            }
        }
        {
            try {
                result = GetSignalXlinkType(arg1);
                
            }
            catch (AGException& err) {
                string message = "AGException\x01";
                message += err.error();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::LoadError& err) {
                string message = "LoadError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::StoreError& err) {
                string message = "StoreError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
        }
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        (void) _swigerr;
    }
    croak(_swigerr);
}


XS(_wrap_GetSignalXlinkHref) {
    char _swigmsg[SWIG_MAX_ERRMSG] = "";
    const char *_swigerr = _swigmsg;
    {
        std::string arg1 ;
        std::string result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: GetSignalXlinkHref(std::string);");
        }
        {
            if (!SvPOK((SV*) ST(0))) {
                SWIG_croak("Type error in argument 1 of GetSignalXlinkHref. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(0), len);
                (&arg1)->assign(ptr, len);
            }
        }
        {
            try {
                result = GetSignalXlinkHref(arg1);
                
            }
            catch (AGException& err) {
                string message = "AGException\x01";
                message += err.error();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::LoadError& err) {
                string message = "LoadError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::StoreError& err) {
                string message = "StoreError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
        }
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        (void) _swigerr;
    }
    croak(_swigerr);
}


XS(_wrap_GetSignalUnit) {
    char _swigmsg[SWIG_MAX_ERRMSG] = "";
    const char *_swigerr = _swigmsg;
    {
        std::string arg1 ;
        std::string result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: GetSignalUnit(std::string);");
        }
        {
            if (!SvPOK((SV*) ST(0))) {
                SWIG_croak("Type error in argument 1 of GetSignalUnit. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(0), len);
                (&arg1)->assign(ptr, len);
            }
        }
        {
            try {
                result = GetSignalUnit(arg1);
                
            }
            catch (AGException& err) {
                string message = "AGException\x01";
                message += err.error();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::LoadError& err) {
                string message = "LoadError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::StoreError& err) {
                string message = "StoreError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
        }
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        (void) _swigerr;
    }
    croak(_swigerr);
}


XS(_wrap_GetSignalTrack) {
    char _swigmsg[SWIG_MAX_ERRMSG] = "";
    const char *_swigerr = _swigmsg;
    {
        std::string arg1 ;
        std::string result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: GetSignalTrack(std::string);");
        }
        {
            if (!SvPOK((SV*) ST(0))) {
                SWIG_croak("Type error in argument 1 of GetSignalTrack. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(0), len);
                (&arg1)->assign(ptr, len);
            }
        }
        {
            try {
                result = GetSignalTrack(arg1);
                
            }
            catch (AGException& err) {
                string message = "AGException\x01";
                message += err.error();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::LoadError& err) {
                string message = "LoadError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::StoreError& err) {
                string message = "StoreError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
        }
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        (void) _swigerr;
    }
    croak(_swigerr);
}


XS(_wrap_CreateAnnotation) {
    char _swigmsg[SWIG_MAX_ERRMSG] = "";
    const char *_swigerr = _swigmsg;
    {
        std::string arg1 ;
        std::string arg2 ;
        std::string arg3 ;
        std::string arg4 ;
        std::string result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 4) || (items > 4)) {
            SWIG_croak("Usage: CreateAnnotation(std::string,std::string,std::string,std::string);");
        }
        {
            if (!SvPOK((SV*) ST(0))) {
                SWIG_croak("Type error in argument 1 of CreateAnnotation. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(0), len);
                (&arg1)->assign(ptr, len);
            }
        }
        {
            if (!SvPOK((SV*) ST(1))) {
                SWIG_croak("Type error in argument 2 of CreateAnnotation. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(1), len);
                (&arg2)->assign(ptr, len);
            }
        }
        {
            if (!SvPOK((SV*) ST(2))) {
                SWIG_croak("Type error in argument 3 of CreateAnnotation. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(2), len);
                (&arg3)->assign(ptr, len);
            }
        }
        {
            if (!SvPOK((SV*) ST(3))) {
                SWIG_croak("Type error in argument 4 of CreateAnnotation. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(3), len);
                (&arg4)->assign(ptr, len);
            }
        }
        {
            try {
                result = CreateAnnotation(arg1,arg2,arg3,arg4);
                
            }
            catch (AGException& err) {
                string message = "AGException\x01";
                message += err.error();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::LoadError& err) {
                string message = "LoadError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::StoreError& err) {
                string message = "StoreError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
        }
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        (void) _swigerr;
    }
    croak(_swigerr);
}


XS(_wrap_ExistsAnnotation) {
    char _swigmsg[SWIG_MAX_ERRMSG] = "";
    const char *_swigerr = _swigmsg;
    {
        std::string arg1 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: ExistsAnnotation(std::string);");
        }
        {
            if (!SvPOK((SV*) ST(0))) {
                SWIG_croak("Type error in argument 1 of ExistsAnnotation. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(0), len);
                (&arg1)->assign(ptr, len);
            }
        }
        {
            try {
                result = (bool)ExistsAnnotation(arg1);
                
            }
            catch (AGException& err) {
                string message = "AGException\x01";
                message += err.error();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::LoadError& err) {
                string message = "LoadError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::StoreError& err) {
                string message = "StoreError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        (void) _swigerr;
    }
    croak(_swigerr);
}


XS(_wrap_DeleteAnnotation) {
    char _swigmsg[SWIG_MAX_ERRMSG] = "";
    const char *_swigerr = _swigmsg;
    {
        std::string arg1 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DeleteAnnotation(std::string);");
        }
        {
            if (!SvPOK((SV*) ST(0))) {
                SWIG_croak("Type error in argument 1 of DeleteAnnotation. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(0), len);
                (&arg1)->assign(ptr, len);
            }
        }
        {
            try {
                DeleteAnnotation(arg1);
                
            }
            catch (AGException& err) {
                string message = "AGException\x01";
                message += err.error();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::LoadError& err) {
                string message = "LoadError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::StoreError& err) {
                string message = "StoreError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
        }
        
        XSRETURN(argvi);
        fail:
        (void) _swigerr;
    }
    croak(_swigerr);
}


XS(_wrap_CopyAnnotation) {
    char _swigmsg[SWIG_MAX_ERRMSG] = "";
    const char *_swigerr = _swigmsg;
    {
        std::string arg1 ;
        std::string result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CopyAnnotation(std::string);");
        }
        {
            if (!SvPOK((SV*) ST(0))) {
                SWIG_croak("Type error in argument 1 of CopyAnnotation. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(0), len);
                (&arg1)->assign(ptr, len);
            }
        }
        {
            try {
                result = CopyAnnotation(arg1);
                
            }
            catch (AGException& err) {
                string message = "AGException\x01";
                message += err.error();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::LoadError& err) {
                string message = "LoadError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::StoreError& err) {
                string message = "StoreError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
        }
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        (void) _swigerr;
    }
    croak(_swigerr);
}


XS(_wrap_SplitAnnotation) {
    char _swigmsg[SWIG_MAX_ERRMSG] = "";
    const char *_swigerr = _swigmsg;
    {
        std::string arg1 ;
        list<std::string > result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SplitAnnotation(std::string);");
        }
        {
            if (!SvPOK((SV*) ST(0))) {
                SWIG_croak("Type error in argument 1 of SplitAnnotation. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(0), len);
                (&arg1)->assign(ptr, len);
            }
        }
        {
            try {
                result = SplitAnnotation(arg1);
                
            }
            catch (AGException& err) {
                string message = "AGException\x01";
                message += err.error();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::LoadError& err) {
                string message = "LoadError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::StoreError& err) {
                string message = "StoreError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
        }
        {
            AV* arr = newAV();
            list_to_array(result, arr);
            ST(argvi) = newRV_noinc((SV*)arr);
            sv_2mortal(ST(argvi));    // don't know why
            argvi++;    // seems to signal the existence of a return value
        }
        XSRETURN(argvi);
        fail:
        (void) _swigerr;
    }
    croak(_swigerr);
}


XS(_wrap_NSplitAnnotation) {
    char _swigmsg[SWIG_MAX_ERRMSG] = "";
    const char *_swigerr = _swigmsg;
    {
        std::string arg1 ;
        short arg2 ;
        list<std::string > result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: NSplitAnnotation(std::string,short);");
        }
        {
            if (!SvPOK((SV*) ST(0))) {
                SWIG_croak("Type error in argument 1 of NSplitAnnotation. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(0), len);
                (&arg1)->assign(ptr, len);
            }
        }
        arg2 = (short) SvIV(ST(1));
        {
            try {
                result = NSplitAnnotation(arg1,arg2);
                
            }
            catch (AGException& err) {
                string message = "AGException\x01";
                message += err.error();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::LoadError& err) {
                string message = "LoadError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::StoreError& err) {
                string message = "StoreError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
        }
        {
            AV* arr = newAV();
            list_to_array(result, arr);
            ST(argvi) = newRV_noinc((SV*)arr);
            sv_2mortal(ST(argvi));    // don't know why
            argvi++;    // seems to signal the existence of a return value
        }
        XSRETURN(argvi);
        fail:
        (void) _swigerr;
    }
    croak(_swigerr);
}


XS(_wrap_GetAnnotationType) {
    char _swigmsg[SWIG_MAX_ERRMSG] = "";
    const char *_swigerr = _swigmsg;
    {
        std::string arg1 ;
        std::string result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: GetAnnotationType(std::string);");
        }
        {
            if (!SvPOK((SV*) ST(0))) {
                SWIG_croak("Type error in argument 1 of GetAnnotationType. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(0), len);
                (&arg1)->assign(ptr, len);
            }
        }
        {
            try {
                result = GetAnnotationType(arg1);
                
            }
            catch (AGException& err) {
                string message = "AGException\x01";
                message += err.error();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::LoadError& err) {
                string message = "LoadError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::StoreError& err) {
                string message = "StoreError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
        }
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        (void) _swigerr;
    }
    croak(_swigerr);
}


XS(_wrap_GetAnnotationInfo) {
    char _swigmsg[SWIG_MAX_ERRMSG] = "";
    const char *_swigerr = _swigmsg;
    {
        std::string arg1 ;
        std::string result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: GetAnnotationInfo(std::string);");
        }
        {
            if (!SvPOK((SV*) ST(0))) {
                SWIG_croak("Type error in argument 1 of GetAnnotationInfo. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(0), len);
                (&arg1)->assign(ptr, len);
            }
        }
        {
            try {
                result = GetAnnotationInfo(arg1);
                
            }
            catch (AGException& err) {
                string message = "AGException\x01";
                message += err.error();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::LoadError& err) {
                string message = "LoadError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::StoreError& err) {
                string message = "StoreError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
        }
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        (void) _swigerr;
    }
    croak(_swigerr);
}


XS(_wrap_GetStartAnchor) {
    char _swigmsg[SWIG_MAX_ERRMSG] = "";
    const char *_swigerr = _swigmsg;
    {
        std::string arg1 ;
        std::string result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: GetStartAnchor(std::string);");
        }
        {
            if (!SvPOK((SV*) ST(0))) {
                SWIG_croak("Type error in argument 1 of GetStartAnchor. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(0), len);
                (&arg1)->assign(ptr, len);
            }
        }
        {
            try {
                result = GetStartAnchor(arg1);
                
            }
            catch (AGException& err) {
                string message = "AGException\x01";
                message += err.error();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::LoadError& err) {
                string message = "LoadError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::StoreError& err) {
                string message = "StoreError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
        }
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        (void) _swigerr;
    }
    croak(_swigerr);
}


XS(_wrap_GetEndAnchor) {
    char _swigmsg[SWIG_MAX_ERRMSG] = "";
    const char *_swigerr = _swigmsg;
    {
        std::string arg1 ;
        std::string result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: GetEndAnchor(std::string);");
        }
        {
            if (!SvPOK((SV*) ST(0))) {
                SWIG_croak("Type error in argument 1 of GetEndAnchor. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(0), len);
                (&arg1)->assign(ptr, len);
            }
        }
        {
            try {
                result = GetEndAnchor(arg1);
                
            }
            catch (AGException& err) {
                string message = "AGException\x01";
                message += err.error();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::LoadError& err) {
                string message = "LoadError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::StoreError& err) {
                string message = "StoreError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
        }
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        (void) _swigerr;
    }
    croak(_swigerr);
}


XS(_wrap_SetStartAnchor) {
    char _swigmsg[SWIG_MAX_ERRMSG] = "";
    const char *_swigerr = _swigmsg;
    {
        std::string arg1 ;
        std::string arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: SetStartAnchor(std::string,std::string);");
        }
        {
            if (!SvPOK((SV*) ST(0))) {
                SWIG_croak("Type error in argument 1 of SetStartAnchor. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(0), len);
                (&arg1)->assign(ptr, len);
            }
        }
        {
            if (!SvPOK((SV*) ST(1))) {
                SWIG_croak("Type error in argument 2 of SetStartAnchor. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(1), len);
                (&arg2)->assign(ptr, len);
            }
        }
        {
            try {
                SetStartAnchor(arg1,arg2);
                
            }
            catch (AGException& err) {
                string message = "AGException\x01";
                message += err.error();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::LoadError& err) {
                string message = "LoadError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::StoreError& err) {
                string message = "StoreError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
        }
        
        XSRETURN(argvi);
        fail:
        (void) _swigerr;
    }
    croak(_swigerr);
}


XS(_wrap_SetEndAnchor) {
    char _swigmsg[SWIG_MAX_ERRMSG] = "";
    const char *_swigerr = _swigmsg;
    {
        std::string arg1 ;
        std::string arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: SetEndAnchor(std::string,std::string);");
        }
        {
            if (!SvPOK((SV*) ST(0))) {
                SWIG_croak("Type error in argument 1 of SetEndAnchor. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(0), len);
                (&arg1)->assign(ptr, len);
            }
        }
        {
            if (!SvPOK((SV*) ST(1))) {
                SWIG_croak("Type error in argument 2 of SetEndAnchor. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(1), len);
                (&arg2)->assign(ptr, len);
            }
        }
        {
            try {
                SetEndAnchor(arg1,arg2);
                
            }
            catch (AGException& err) {
                string message = "AGException\x01";
                message += err.error();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::LoadError& err) {
                string message = "LoadError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::StoreError& err) {
                string message = "StoreError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
        }
        
        XSRETURN(argvi);
        fail:
        (void) _swigerr;
    }
    croak(_swigerr);
}


XS(_wrap_GetStartOffset) {
    char _swigmsg[SWIG_MAX_ERRMSG] = "";
    const char *_swigerr = _swigmsg;
    {
        std::string arg1 ;
        double result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: GetStartOffset(std::string);");
        }
        {
            if (!SvPOK((SV*) ST(0))) {
                SWIG_croak("Type error in argument 1 of GetStartOffset. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(0), len);
                (&arg1)->assign(ptr, len);
            }
        }
        {
            try {
                result = (double)GetStartOffset(arg1);
                
            }
            catch (AGException& err) {
                string message = "AGException\x01";
                message += err.error();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::LoadError& err) {
                string message = "LoadError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::StoreError& err) {
                string message = "StoreError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setnv(ST(argvi++), (double) result);
        XSRETURN(argvi);
        fail:
        (void) _swigerr;
    }
    croak(_swigerr);
}


XS(_wrap_GetEndOffset) {
    char _swigmsg[SWIG_MAX_ERRMSG] = "";
    const char *_swigerr = _swigmsg;
    {
        std::string arg1 ;
        double result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: GetEndOffset(std::string);");
        }
        {
            if (!SvPOK((SV*) ST(0))) {
                SWIG_croak("Type error in argument 1 of GetEndOffset. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(0), len);
                (&arg1)->assign(ptr, len);
            }
        }
        {
            try {
                result = (double)GetEndOffset(arg1);
                
            }
            catch (AGException& err) {
                string message = "AGException\x01";
                message += err.error();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::LoadError& err) {
                string message = "LoadError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::StoreError& err) {
                string message = "StoreError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setnv(ST(argvi++), (double) result);
        XSRETURN(argvi);
        fail:
        (void) _swigerr;
    }
    croak(_swigerr);
}


XS(_wrap_SetStartOffset) {
    char _swigmsg[SWIG_MAX_ERRMSG] = "";
    const char *_swigerr = _swigmsg;
    {
        std::string arg1 ;
        double arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: SetStartOffset(std::string,double);");
        }
        {
            if (!SvPOK((SV*) ST(0))) {
                SWIG_croak("Type error in argument 1 of SetStartOffset. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(0), len);
                (&arg1)->assign(ptr, len);
            }
        }
        arg2 = (double) SvNV(ST(1));
        
        {
            try {
                SetStartOffset(arg1,arg2);
                
            }
            catch (AGException& err) {
                string message = "AGException\x01";
                message += err.error();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::LoadError& err) {
                string message = "LoadError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::StoreError& err) {
                string message = "StoreError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
        }
        
        XSRETURN(argvi);
        fail:
        (void) _swigerr;
    }
    croak(_swigerr);
}


XS(_wrap_SetEndOffset) {
    char _swigmsg[SWIG_MAX_ERRMSG] = "";
    const char *_swigerr = _swigmsg;
    {
        std::string arg1 ;
        double arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: SetEndOffset(std::string,double);");
        }
        {
            if (!SvPOK((SV*) ST(0))) {
                SWIG_croak("Type error in argument 1 of SetEndOffset. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(0), len);
                (&arg1)->assign(ptr, len);
            }
        }
        arg2 = (double) SvNV(ST(1));
        
        {
            try {
                SetEndOffset(arg1,arg2);
                
            }
            catch (AGException& err) {
                string message = "AGException\x01";
                message += err.error();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::LoadError& err) {
                string message = "LoadError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::StoreError& err) {
                string message = "StoreError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
        }
        
        XSRETURN(argvi);
        fail:
        (void) _swigerr;
    }
    croak(_swigerr);
}


XS(_wrap_GetAnnotationTypes) {
    char _swigmsg[SWIG_MAX_ERRMSG] = "";
    const char *_swigerr = _swigmsg;
    {
        std::string arg1 ;
        set<std::string > result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: GetAnnotationTypes(std::string);");
        }
        {
            if (!SvPOK((SV*) ST(0))) {
                SWIG_croak("Type error in argument 1 of GetAnnotationTypes. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(0), len);
                (&arg1)->assign(ptr, len);
            }
        }
        {
            try {
                result = GetAnnotationTypes(arg1);
                
            }
            catch (AGException& err) {
                string message = "AGException\x01";
                message += err.error();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::LoadError& err) {
                string message = "LoadError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::StoreError& err) {
                string message = "StoreError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
        }
        {
            AV* arr = newAV();
            set_to_array(result, arr);
            ST(argvi) = newRV_noinc((SV*)arr);
            sv_2mortal(ST(argvi));    // don't know why
            argvi++;    // seems to signal the existence of a return value
        }
        XSRETURN(argvi);
        fail:
        (void) _swigerr;
    }
    croak(_swigerr);
}


XS(_wrap_GetAnnotationFeatureNames__SWIG_0) {
    char _swigmsg[SWIG_MAX_ERRMSG] = "";
    const char *_swigerr = _swigmsg;
    {
        std::string arg1 ;
        std::string *arg2 = 0 ;
        set<std::string > result;
        std::string temp2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: GetAnnotationFeatureNames(std::string,std::string const &);");
        }
        {
            if (!SvPOK((SV*) ST(0))) {
                SWIG_croak("Type error in argument 1 of GetAnnotationFeatureNames. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(0), len);
                (&arg1)->assign(ptr, len);
            }
        }
        {
            if (!SvPOK((SV*) ST(1))) {
                SWIG_croak("Type error in argument 2 of GetAnnotationFeatureNames. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(1), len);
                temp2.assign(ptr, len);
                arg2 = &temp2;
            }
        }
        {
            try {
                result = GetAnnotationFeatureNames(arg1,(std::string const &)*arg2);
                
            }
            catch (AGException& err) {
                string message = "AGException\x01";
                message += err.error();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::LoadError& err) {
                string message = "LoadError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::StoreError& err) {
                string message = "StoreError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
        }
        {
            AV* arr = newAV();
            set_to_array(result, arr);
            ST(argvi) = newRV_noinc((SV*)arr);
            sv_2mortal(ST(argvi));    // don't know why
            argvi++;    // seems to signal the existence of a return value
        }
        XSRETURN(argvi);
        fail:
        (void) _swigerr;
    }
    croak(_swigerr);
}


XS(_wrap_GetAnnotationFeatureNames__SWIG_1) {
    char _swigmsg[SWIG_MAX_ERRMSG] = "";
    const char *_swigerr = _swigmsg;
    {
        std::string arg1 ;
        set<std::string > result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: GetAnnotationFeatureNames(std::string);");
        }
        {
            if (!SvPOK((SV*) ST(0))) {
                SWIG_croak("Type error in argument 1 of GetAnnotationFeatureNames. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(0), len);
                (&arg1)->assign(ptr, len);
            }
        }
        {
            try {
                result = GetAnnotationFeatureNames(arg1);
                
            }
            catch (AGException& err) {
                string message = "AGException\x01";
                message += err.error();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::LoadError& err) {
                string message = "LoadError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::StoreError& err) {
                string message = "StoreError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
        }
        {
            AV* arr = newAV();
            set_to_array(result, arr);
            ST(argvi) = newRV_noinc((SV*)arr);
            sv_2mortal(ST(argvi));    // don't know why
            argvi++;    // seems to signal the existence of a return value
        }
        XSRETURN(argvi);
        fail:
        (void) _swigerr;
    }
    croak(_swigerr);
}


XS(_wrap_GetAnnotationFeatureNames) {
    dXSARGS;
    
    if (items == 1) {
            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_GetAnnotationFeatureNames__SWIG_1); return;
    }
    if (items == 2) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_GetAnnotationFeatureNames__SWIG_0); return;
    }
    
    croak("No matching function for overloaded 'GetAnnotationFeatureNames'");
    XSRETURN(0);
}


XS(_wrap_SetFeature) {
    char _swigmsg[SWIG_MAX_ERRMSG] = "";
    const char *_swigerr = _swigmsg;
    {
        std::string arg1 ;
        std::string arg2 ;
        std::string arg3 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: SetFeature(std::string,std::string,std::string);");
        }
        {
            if (!SvPOK((SV*) ST(0))) {
                SWIG_croak("Type error in argument 1 of SetFeature. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(0), len);
                (&arg1)->assign(ptr, len);
            }
        }
        {
            if (!SvPOK((SV*) ST(1))) {
                SWIG_croak("Type error in argument 2 of SetFeature. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(1), len);
                (&arg2)->assign(ptr, len);
            }
        }
        {
            if (!SvPOK((SV*) ST(2))) {
                SWIG_croak("Type error in argument 3 of SetFeature. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(2), len);
                (&arg3)->assign(ptr, len);
            }
        }
        {
            try {
                SetFeature(arg1,arg2,arg3);
                
            }
            catch (AGException& err) {
                string message = "AGException\x01";
                message += err.error();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::LoadError& err) {
                string message = "LoadError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::StoreError& err) {
                string message = "StoreError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
        }
        
        XSRETURN(argvi);
        fail:
        (void) _swigerr;
    }
    croak(_swigerr);
}


XS(_wrap_ExistsFeature) {
    char _swigmsg[SWIG_MAX_ERRMSG] = "";
    const char *_swigerr = _swigmsg;
    {
        std::string arg1 ;
        std::string arg2 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: ExistsFeature(std::string,std::string);");
        }
        {
            if (!SvPOK((SV*) ST(0))) {
                SWIG_croak("Type error in argument 1 of ExistsFeature. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(0), len);
                (&arg1)->assign(ptr, len);
            }
        }
        {
            if (!SvPOK((SV*) ST(1))) {
                SWIG_croak("Type error in argument 2 of ExistsFeature. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(1), len);
                (&arg2)->assign(ptr, len);
            }
        }
        {
            try {
                result = (bool)ExistsFeature(arg1,arg2);
                
            }
            catch (AGException& err) {
                string message = "AGException\x01";
                message += err.error();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::LoadError& err) {
                string message = "LoadError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::StoreError& err) {
                string message = "StoreError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        (void) _swigerr;
    }
    croak(_swigerr);
}


XS(_wrap_DeleteFeature) {
    char _swigmsg[SWIG_MAX_ERRMSG] = "";
    const char *_swigerr = _swigmsg;
    {
        std::string arg1 ;
        std::string arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: DeleteFeature(std::string,std::string);");
        }
        {
            if (!SvPOK((SV*) ST(0))) {
                SWIG_croak("Type error in argument 1 of DeleteFeature. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(0), len);
                (&arg1)->assign(ptr, len);
            }
        }
        {
            if (!SvPOK((SV*) ST(1))) {
                SWIG_croak("Type error in argument 2 of DeleteFeature. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(1), len);
                (&arg2)->assign(ptr, len);
            }
        }
        {
            try {
                DeleteFeature(arg1,arg2);
                
            }
            catch (AGException& err) {
                string message = "AGException\x01";
                message += err.error();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::LoadError& err) {
                string message = "LoadError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::StoreError& err) {
                string message = "StoreError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
        }
        
        XSRETURN(argvi);
        fail:
        (void) _swigerr;
    }
    croak(_swigerr);
}


XS(_wrap_GetFeature) {
    char _swigmsg[SWIG_MAX_ERRMSG] = "";
    const char *_swigerr = _swigmsg;
    {
        std::string arg1 ;
        std::string arg2 ;
        std::string result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: GetFeature(std::string,std::string);");
        }
        {
            if (!SvPOK((SV*) ST(0))) {
                SWIG_croak("Type error in argument 1 of GetFeature. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(0), len);
                (&arg1)->assign(ptr, len);
            }
        }
        {
            if (!SvPOK((SV*) ST(1))) {
                SWIG_croak("Type error in argument 2 of GetFeature. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(1), len);
                (&arg2)->assign(ptr, len);
            }
        }
        {
            try {
                result = GetFeature(arg1,arg2);
                
            }
            catch (AGException& err) {
                string message = "AGException\x01";
                message += err.error();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::LoadError& err) {
                string message = "LoadError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::StoreError& err) {
                string message = "StoreError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
        }
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        (void) _swigerr;
    }
    croak(_swigerr);
}


XS(_wrap_UnsetFeature) {
    char _swigmsg[SWIG_MAX_ERRMSG] = "";
    const char *_swigerr = _swigmsg;
    {
        std::string arg1 ;
        std::string arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: UnsetFeature(std::string,std::string);");
        }
        {
            if (!SvPOK((SV*) ST(0))) {
                SWIG_croak("Type error in argument 1 of UnsetFeature. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(0), len);
                (&arg1)->assign(ptr, len);
            }
        }
        {
            if (!SvPOK((SV*) ST(1))) {
                SWIG_croak("Type error in argument 2 of UnsetFeature. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(1), len);
                (&arg2)->assign(ptr, len);
            }
        }
        {
            try {
                UnsetFeature(arg1,arg2);
                
            }
            catch (AGException& err) {
                string message = "AGException\x01";
                message += err.error();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::LoadError& err) {
                string message = "LoadError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::StoreError& err) {
                string message = "StoreError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
        }
        
        XSRETURN(argvi);
        fail:
        (void) _swigerr;
    }
    croak(_swigerr);
}


XS(_wrap_GetFeatureNames) {
    char _swigmsg[SWIG_MAX_ERRMSG] = "";
    const char *_swigerr = _swigmsg;
    {
        std::string arg1 ;
        set<std::string > result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: GetFeatureNames(std::string);");
        }
        {
            if (!SvPOK((SV*) ST(0))) {
                SWIG_croak("Type error in argument 1 of GetFeatureNames. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(0), len);
                (&arg1)->assign(ptr, len);
            }
        }
        {
            try {
                result = GetFeatureNames(arg1);
                
            }
            catch (AGException& err) {
                string message = "AGException\x01";
                message += err.error();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::LoadError& err) {
                string message = "LoadError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::StoreError& err) {
                string message = "StoreError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
        }
        {
            AV* arr = newAV();
            set_to_array(result, arr);
            ST(argvi) = newRV_noinc((SV*)arr);
            sv_2mortal(ST(argvi));    // don't know why
            argvi++;    // seems to signal the existence of a return value
        }
        XSRETURN(argvi);
        fail:
        (void) _swigerr;
    }
    croak(_swigerr);
}


XS(_wrap_SetFeatures) {
    char _swigmsg[SWIG_MAX_ERRMSG] = "";
    const char *_swigerr = _swigmsg;
    {
        std::string arg1 ;
        map<std::string,std::string > *arg2 = 0 ;
        map<std::string,std::string > temp2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: SetFeatures(std::string,map<std::string,std::string > &);");
        }
        {
            if (!SvPOK((SV*) ST(0))) {
                SWIG_croak("Type error in argument 1 of SetFeatures. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(0), len);
                (&arg1)->assign(ptr, len);
            }
        }
        {
            if (SvROK(ST(1))) {
                // expecting a reference
                HV* hv = (HV*)SvRV(ST(1));
                if (SvTYPE(hv) != SVt_PVHV)
                SWIG_croak("Type error in argument 2, of SetFeatures. "
                "Expected a reference to a hash of string");
                hash_to_map(hv, temp2);
                arg2 = &temp2;
            }
            else {
                SWIG_croak("Type error in argument 2 of $sysname. "
                "Expected a reference to a hash of string");
            }
        }
        {
            try {
                SetFeatures(arg1,*arg2);
                
            }
            catch (AGException& err) {
                string message = "AGException\x01";
                message += err.error();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::LoadError& err) {
                string message = "LoadError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::StoreError& err) {
                string message = "StoreError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
        }
        
        XSRETURN(argvi);
        fail:
        (void) _swigerr;
    }
    croak(_swigerr);
}


XS(_wrap_GetFeatures) {
    char _swigmsg[SWIG_MAX_ERRMSG] = "";
    const char *_swigerr = _swigmsg;
    {
        std::string arg1 ;
        map<std::string,std::string > result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: GetFeatures(std::string);");
        }
        {
            if (!SvPOK((SV*) ST(0))) {
                SWIG_croak("Type error in argument 1 of GetFeatures. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(0), len);
                (&arg1)->assign(ptr, len);
            }
        }
        {
            try {
                result = GetFeatures(arg1);
                
            }
            catch (AGException& err) {
                string message = "AGException\x01";
                message += err.error();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::LoadError& err) {
                string message = "LoadError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::StoreError& err) {
                string message = "StoreError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
        }
        {
            HV* hv = newHV();
            map_to_hash(result, hv);
            ST(argvi) = newRV_noinc((SV*)hv);
            sv_2mortal(ST(argvi));
            argvi++;
        }
        XSRETURN(argvi);
        fail:
        (void) _swigerr;
    }
    croak(_swigerr);
}


XS(_wrap_UnsetFeatures) {
    char _swigmsg[SWIG_MAX_ERRMSG] = "";
    const char *_swigerr = _swigmsg;
    {
        std::string arg1 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: UnsetFeatures(std::string);");
        }
        {
            if (!SvPOK((SV*) ST(0))) {
                SWIG_croak("Type error in argument 1 of UnsetFeatures. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(0), len);
                (&arg1)->assign(ptr, len);
            }
        }
        {
            try {
                UnsetFeatures(arg1);
                
            }
            catch (AGException& err) {
                string message = "AGException\x01";
                message += err.error();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::LoadError& err) {
                string message = "LoadError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::StoreError& err) {
                string message = "StoreError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
        }
        
        XSRETURN(argvi);
        fail:
        (void) _swigerr;
    }
    croak(_swigerr);
}


XS(_wrap_CreateAnchor__SWIG_0) {
    char _swigmsg[SWIG_MAX_ERRMSG] = "";
    const char *_swigerr = _swigmsg;
    {
        std::string arg1 ;
        double arg2 ;
        std::string arg3 ;
        set<std::string > *arg4 = 0 ;
        std::string result;
        set<std::string > temp4 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 4) || (items > 4)) {
            SWIG_croak("Usage: CreateAnchor(std::string,double,std::string,set<std::string > &);");
        }
        {
            if (!SvPOK((SV*) ST(0))) {
                SWIG_croak("Type error in argument 1 of CreateAnchor. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(0), len);
                (&arg1)->assign(ptr, len);
            }
        }
        arg2 = (double) SvNV(ST(1));
        
        {
            if (!SvPOK((SV*) ST(2))) {
                SWIG_croak("Type error in argument 3 of CreateAnchor. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(2), len);
                (&arg3)->assign(ptr, len);
            }
        }
        {
            if (SvROK(ST(3))) {
                // ROK: expecting a reference, not array
                AV *av = (AV*)SvRV(ST(3));
                if (SvTYPE(av) != SVt_PVAV)
                SWIG_croak("Type error in argument 4, of CreateAnchor. "
                "Expected a reference to an array of string");
                array_to_set(av, temp4);
                arg4 = &temp4;
            }
            else {
                SWIG_croak("Type error in argument 4 of $sysname. "
                "Expected a reference to an array of string");
            }
        }
        {
            try {
                result = CreateAnchor(arg1,arg2,arg3,*arg4);
                
            }
            catch (AGException& err) {
                string message = "AGException\x01";
                message += err.error();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::LoadError& err) {
                string message = "LoadError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::StoreError& err) {
                string message = "StoreError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
        }
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        (void) _swigerr;
    }
    croak(_swigerr);
}


XS(_wrap_CreateAnchor__SWIG_1) {
    char _swigmsg[SWIG_MAX_ERRMSG] = "";
    const char *_swigerr = _swigmsg;
    {
        std::string arg1 ;
        set<std::string > *arg2 = 0 ;
        std::string result;
        set<std::string > temp2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CreateAnchor(std::string,set<std::string > &);");
        }
        {
            if (!SvPOK((SV*) ST(0))) {
                SWIG_croak("Type error in argument 1 of CreateAnchor. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(0), len);
                (&arg1)->assign(ptr, len);
            }
        }
        {
            if (SvROK(ST(1))) {
                // ROK: expecting a reference, not array
                AV *av = (AV*)SvRV(ST(1));
                if (SvTYPE(av) != SVt_PVAV)
                SWIG_croak("Type error in argument 2, of CreateAnchor. "
                "Expected a reference to an array of string");
                array_to_set(av, temp2);
                arg2 = &temp2;
            }
            else {
                SWIG_croak("Type error in argument 2 of $sysname. "
                "Expected a reference to an array of string");
            }
        }
        {
            try {
                result = CreateAnchor(arg1,*arg2);
                
            }
            catch (AGException& err) {
                string message = "AGException\x01";
                message += err.error();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::LoadError& err) {
                string message = "LoadError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::StoreError& err) {
                string message = "StoreError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
        }
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        (void) _swigerr;
    }
    croak(_swigerr);
}


XS(_wrap_CreateAnchor__SWIG_2) {
    char _swigmsg[SWIG_MAX_ERRMSG] = "";
    const char *_swigerr = _swigmsg;
    {
        std::string arg1 ;
        std::string result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: CreateAnchor(std::string);");
        }
        {
            if (!SvPOK((SV*) ST(0))) {
                SWIG_croak("Type error in argument 1 of CreateAnchor. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(0), len);
                (&arg1)->assign(ptr, len);
            }
        }
        {
            try {
                result = CreateAnchor(arg1);
                
            }
            catch (AGException& err) {
                string message = "AGException\x01";
                message += err.error();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::LoadError& err) {
                string message = "LoadError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::StoreError& err) {
                string message = "StoreError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
        }
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        (void) _swigerr;
    }
    croak(_swigerr);
}


XS(_wrap_CreateAnchor) {
    dXSARGS;
    
    if (items == 1) {
            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_CreateAnchor__SWIG_2); return;
    }
    if (items == 2) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_CreateAnchor__SWIG_1); return;
    }
    if (items == 4) {
                        (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_CreateAnchor__SWIG_0); return;
    }
    
    croak("No matching function for overloaded 'CreateAnchor'");
    XSRETURN(0);
}


XS(_wrap_ExistsAnchor) {
    char _swigmsg[SWIG_MAX_ERRMSG] = "";
    const char *_swigerr = _swigmsg;
    {
        std::string arg1 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: ExistsAnchor(std::string);");
        }
        {
            if (!SvPOK((SV*) ST(0))) {
                SWIG_croak("Type error in argument 1 of ExistsAnchor. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(0), len);
                (&arg1)->assign(ptr, len);
            }
        }
        {
            try {
                result = (bool)ExistsAnchor(arg1);
                
            }
            catch (AGException& err) {
                string message = "AGException\x01";
                message += err.error();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::LoadError& err) {
                string message = "LoadError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::StoreError& err) {
                string message = "StoreError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        (void) _swigerr;
    }
    croak(_swigerr);
}


XS(_wrap_DeleteAnchor) {
    char _swigmsg[SWIG_MAX_ERRMSG] = "";
    const char *_swigerr = _swigmsg;
    {
        std::string arg1 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: DeleteAnchor(std::string);");
        }
        {
            if (!SvPOK((SV*) ST(0))) {
                SWIG_croak("Type error in argument 1 of DeleteAnchor. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(0), len);
                (&arg1)->assign(ptr, len);
            }
        }
        {
            try {
                DeleteAnchor(arg1);
                
            }
            catch (AGException& err) {
                string message = "AGException\x01";
                message += err.error();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::LoadError& err) {
                string message = "LoadError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::StoreError& err) {
                string message = "StoreError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
        }
        
        XSRETURN(argvi);
        fail:
        (void) _swigerr;
    }
    croak(_swigerr);
}


XS(_wrap_SetAnchorOffset) {
    char _swigmsg[SWIG_MAX_ERRMSG] = "";
    const char *_swigerr = _swigmsg;
    {
        std::string arg1 ;
        double arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: SetAnchorOffset(std::string,double);");
        }
        {
            if (!SvPOK((SV*) ST(0))) {
                SWIG_croak("Type error in argument 1 of SetAnchorOffset. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(0), len);
                (&arg1)->assign(ptr, len);
            }
        }
        arg2 = (double) SvNV(ST(1));
        
        {
            try {
                SetAnchorOffset(arg1,arg2);
                
            }
            catch (AGException& err) {
                string message = "AGException\x01";
                message += err.error();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::LoadError& err) {
                string message = "LoadError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::StoreError& err) {
                string message = "StoreError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
        }
        
        XSRETURN(argvi);
        fail:
        (void) _swigerr;
    }
    croak(_swigerr);
}


XS(_wrap_GetAnchorOffset) {
    char _swigmsg[SWIG_MAX_ERRMSG] = "";
    const char *_swigerr = _swigmsg;
    {
        std::string arg1 ;
        double result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: GetAnchorOffset(std::string);");
        }
        {
            if (!SvPOK((SV*) ST(0))) {
                SWIG_croak("Type error in argument 1 of GetAnchorOffset. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(0), len);
                (&arg1)->assign(ptr, len);
            }
        }
        {
            try {
                result = (double)GetAnchorOffset(arg1);
                
            }
            catch (AGException& err) {
                string message = "AGException\x01";
                message += err.error();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::LoadError& err) {
                string message = "LoadError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::StoreError& err) {
                string message = "StoreError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setnv(ST(argvi++), (double) result);
        XSRETURN(argvi);
        fail:
        (void) _swigerr;
    }
    croak(_swigerr);
}


XS(_wrap_SetOffsetUnit) {
    char _swigmsg[SWIG_MAX_ERRMSG] = "";
    const char *_swigerr = _swigmsg;
    {
        std::string arg1 ;
        std::string arg2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: SetOffsetUnit(std::string,std::string);");
        }
        {
            if (!SvPOK((SV*) ST(0))) {
                SWIG_croak("Type error in argument 1 of SetOffsetUnit. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(0), len);
                (&arg1)->assign(ptr, len);
            }
        }
        {
            if (!SvPOK((SV*) ST(1))) {
                SWIG_croak("Type error in argument 2 of SetOffsetUnit. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(1), len);
                (&arg2)->assign(ptr, len);
            }
        }
        {
            try {
                SetOffsetUnit(arg1,arg2);
                
            }
            catch (AGException& err) {
                string message = "AGException\x01";
                message += err.error();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::LoadError& err) {
                string message = "LoadError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::StoreError& err) {
                string message = "StoreError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
        }
        
        XSRETURN(argvi);
        fail:
        (void) _swigerr;
    }
    croak(_swigerr);
}


XS(_wrap_GetOffsetUnit) {
    char _swigmsg[SWIG_MAX_ERRMSG] = "";
    const char *_swigerr = _swigmsg;
    {
        std::string arg1 ;
        std::string result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: GetOffsetUnit(std::string);");
        }
        {
            if (!SvPOK((SV*) ST(0))) {
                SWIG_croak("Type error in argument 1 of GetOffsetUnit. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(0), len);
                (&arg1)->assign(ptr, len);
            }
        }
        {
            try {
                result = GetOffsetUnit(arg1);
                
            }
            catch (AGException& err) {
                string message = "AGException\x01";
                message += err.error();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::LoadError& err) {
                string message = "LoadError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::StoreError& err) {
                string message = "StoreError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
        }
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        (void) _swigerr;
    }
    croak(_swigerr);
}


XS(_wrap_SetAnchorSignalIds) {
    char _swigmsg[SWIG_MAX_ERRMSG] = "";
    const char *_swigerr = _swigmsg;
    {
        std::string arg1 ;
        set<std::string > *arg2 = 0 ;
        set<std::string > temp2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: SetAnchorSignalIds(std::string,set<std::string > &);");
        }
        {
            if (!SvPOK((SV*) ST(0))) {
                SWIG_croak("Type error in argument 1 of SetAnchorSignalIds. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(0), len);
                (&arg1)->assign(ptr, len);
            }
        }
        {
            if (SvROK(ST(1))) {
                // ROK: expecting a reference, not array
                AV *av = (AV*)SvRV(ST(1));
                if (SvTYPE(av) != SVt_PVAV)
                SWIG_croak("Type error in argument 2, of SetAnchorSignalIds. "
                "Expected a reference to an array of string");
                array_to_set(av, temp2);
                arg2 = &temp2;
            }
            else {
                SWIG_croak("Type error in argument 2 of $sysname. "
                "Expected a reference to an array of string");
            }
        }
        {
            try {
                SetAnchorSignalIds(arg1,*arg2);
                
            }
            catch (AGException& err) {
                string message = "AGException\x01";
                message += err.error();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::LoadError& err) {
                string message = "LoadError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::StoreError& err) {
                string message = "StoreError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
        }
        
        XSRETURN(argvi);
        fail:
        (void) _swigerr;
    }
    croak(_swigerr);
}


XS(_wrap_GetAnchorSignalIds) {
    char _swigmsg[SWIG_MAX_ERRMSG] = "";
    const char *_swigerr = _swigmsg;
    {
        std::string arg1 ;
        set<std::string > result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: GetAnchorSignalIds(std::string);");
        }
        {
            if (!SvPOK((SV*) ST(0))) {
                SWIG_croak("Type error in argument 1 of GetAnchorSignalIds. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(0), len);
                (&arg1)->assign(ptr, len);
            }
        }
        {
            try {
                result = GetAnchorSignalIds(arg1);
                
            }
            catch (AGException& err) {
                string message = "AGException\x01";
                message += err.error();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::LoadError& err) {
                string message = "LoadError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::StoreError& err) {
                string message = "StoreError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
        }
        {
            AV* arr = newAV();
            set_to_array(result, arr);
            ST(argvi) = newRV_noinc((SV*)arr);
            sv_2mortal(ST(argvi));    // don't know why
            argvi++;    // seems to signal the existence of a return value
        }
        XSRETURN(argvi);
        fail:
        (void) _swigerr;
    }
    croak(_swigerr);
}


XS(_wrap_GetAnchored) {
    char _swigmsg[SWIG_MAX_ERRMSG] = "";
    const char *_swigerr = _swigmsg;
    {
        std::string arg1 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: GetAnchored(std::string);");
        }
        {
            if (!SvPOK((SV*) ST(0))) {
                SWIG_croak("Type error in argument 1 of GetAnchored. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(0), len);
                (&arg1)->assign(ptr, len);
            }
        }
        {
            try {
                result = (bool)GetAnchored(arg1);
                
            }
            catch (AGException& err) {
                string message = "AGException\x01";
                message += err.error();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::LoadError& err) {
                string message = "LoadError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::StoreError& err) {
                string message = "StoreError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        (void) _swigerr;
    }
    croak(_swigerr);
}


XS(_wrap_UnsetAnchorOffset) {
    char _swigmsg[SWIG_MAX_ERRMSG] = "";
    const char *_swigerr = _swigmsg;
    {
        std::string arg1 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: UnsetAnchorOffset(std::string);");
        }
        {
            if (!SvPOK((SV*) ST(0))) {
                SWIG_croak("Type error in argument 1 of UnsetAnchorOffset. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(0), len);
                (&arg1)->assign(ptr, len);
            }
        }
        {
            try {
                UnsetAnchorOffset(arg1);
                
            }
            catch (AGException& err) {
                string message = "AGException\x01";
                message += err.error();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::LoadError& err) {
                string message = "LoadError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::StoreError& err) {
                string message = "StoreError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
        }
        
        XSRETURN(argvi);
        fail:
        (void) _swigerr;
    }
    croak(_swigerr);
}


XS(_wrap_SplitAnchor) {
    char _swigmsg[SWIG_MAX_ERRMSG] = "";
    const char *_swigerr = _swigmsg;
    {
        std::string arg1 ;
        std::string result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SplitAnchor(std::string);");
        }
        {
            if (!SvPOK((SV*) ST(0))) {
                SWIG_croak("Type error in argument 1 of SplitAnchor. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(0), len);
                (&arg1)->assign(ptr, len);
            }
        }
        {
            try {
                result = SplitAnchor(arg1);
                
            }
            catch (AGException& err) {
                string message = "AGException\x01";
                message += err.error();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::LoadError& err) {
                string message = "LoadError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::StoreError& err) {
                string message = "StoreError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
        }
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        (void) _swigerr;
    }
    croak(_swigerr);
}


XS(_wrap_GetIncomingAnnotationSet__SWIG_0) {
    char _swigmsg[SWIG_MAX_ERRMSG] = "";
    const char *_swigerr = _swigmsg;
    {
        std::string arg1 ;
        std::string *arg2 = 0 ;
        set<std::string > result;
        std::string temp2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: GetIncomingAnnotationSet(std::string,std::string const &);");
        }
        {
            if (!SvPOK((SV*) ST(0))) {
                SWIG_croak("Type error in argument 1 of GetIncomingAnnotationSet. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(0), len);
                (&arg1)->assign(ptr, len);
            }
        }
        {
            if (!SvPOK((SV*) ST(1))) {
                SWIG_croak("Type error in argument 2 of GetIncomingAnnotationSet. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(1), len);
                temp2.assign(ptr, len);
                arg2 = &temp2;
            }
        }
        {
            try {
                result = GetIncomingAnnotationSet(arg1,(std::string const &)*arg2);
                
            }
            catch (AGException& err) {
                string message = "AGException\x01";
                message += err.error();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::LoadError& err) {
                string message = "LoadError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::StoreError& err) {
                string message = "StoreError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
        }
        {
            AV* arr = newAV();
            set_to_array(result, arr);
            ST(argvi) = newRV_noinc((SV*)arr);
            sv_2mortal(ST(argvi));    // don't know why
            argvi++;    // seems to signal the existence of a return value
        }
        XSRETURN(argvi);
        fail:
        (void) _swigerr;
    }
    croak(_swigerr);
}


XS(_wrap_GetIncomingAnnotationSet__SWIG_1) {
    char _swigmsg[SWIG_MAX_ERRMSG] = "";
    const char *_swigerr = _swigmsg;
    {
        std::string arg1 ;
        set<std::string > result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: GetIncomingAnnotationSet(std::string);");
        }
        {
            if (!SvPOK((SV*) ST(0))) {
                SWIG_croak("Type error in argument 1 of GetIncomingAnnotationSet. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(0), len);
                (&arg1)->assign(ptr, len);
            }
        }
        {
            try {
                result = GetIncomingAnnotationSet(arg1);
                
            }
            catch (AGException& err) {
                string message = "AGException\x01";
                message += err.error();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::LoadError& err) {
                string message = "LoadError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::StoreError& err) {
                string message = "StoreError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
        }
        {
            AV* arr = newAV();
            set_to_array(result, arr);
            ST(argvi) = newRV_noinc((SV*)arr);
            sv_2mortal(ST(argvi));    // don't know why
            argvi++;    // seems to signal the existence of a return value
        }
        XSRETURN(argvi);
        fail:
        (void) _swigerr;
    }
    croak(_swigerr);
}


XS(_wrap_GetIncomingAnnotationSet) {
    dXSARGS;
    
    if (items == 1) {
            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_GetIncomingAnnotationSet__SWIG_1); return;
    }
    if (items == 2) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_GetIncomingAnnotationSet__SWIG_0); return;
    }
    
    croak("No matching function for overloaded 'GetIncomingAnnotationSet'");
    XSRETURN(0);
}


XS(_wrap_GetOutgoingAnnotationSet__SWIG_0) {
    char _swigmsg[SWIG_MAX_ERRMSG] = "";
    const char *_swigerr = _swigmsg;
    {
        std::string arg1 ;
        std::string *arg2 = 0 ;
        set<std::string > result;
        std::string temp2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: GetOutgoingAnnotationSet(std::string,std::string const &);");
        }
        {
            if (!SvPOK((SV*) ST(0))) {
                SWIG_croak("Type error in argument 1 of GetOutgoingAnnotationSet. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(0), len);
                (&arg1)->assign(ptr, len);
            }
        }
        {
            if (!SvPOK((SV*) ST(1))) {
                SWIG_croak("Type error in argument 2 of GetOutgoingAnnotationSet. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(1), len);
                temp2.assign(ptr, len);
                arg2 = &temp2;
            }
        }
        {
            try {
                result = GetOutgoingAnnotationSet(arg1,(std::string const &)*arg2);
                
            }
            catch (AGException& err) {
                string message = "AGException\x01";
                message += err.error();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::LoadError& err) {
                string message = "LoadError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::StoreError& err) {
                string message = "StoreError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
        }
        {
            AV* arr = newAV();
            set_to_array(result, arr);
            ST(argvi) = newRV_noinc((SV*)arr);
            sv_2mortal(ST(argvi));    // don't know why
            argvi++;    // seems to signal the existence of a return value
        }
        XSRETURN(argvi);
        fail:
        (void) _swigerr;
    }
    croak(_swigerr);
}


XS(_wrap_GetOutgoingAnnotationSet__SWIG_1) {
    char _swigmsg[SWIG_MAX_ERRMSG] = "";
    const char *_swigerr = _swigmsg;
    {
        std::string arg1 ;
        set<std::string > result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: GetOutgoingAnnotationSet(std::string);");
        }
        {
            if (!SvPOK((SV*) ST(0))) {
                SWIG_croak("Type error in argument 1 of GetOutgoingAnnotationSet. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(0), len);
                (&arg1)->assign(ptr, len);
            }
        }
        {
            try {
                result = GetOutgoingAnnotationSet(arg1);
                
            }
            catch (AGException& err) {
                string message = "AGException\x01";
                message += err.error();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::LoadError& err) {
                string message = "LoadError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::StoreError& err) {
                string message = "StoreError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
        }
        {
            AV* arr = newAV();
            set_to_array(result, arr);
            ST(argvi) = newRV_noinc((SV*)arr);
            sv_2mortal(ST(argvi));    // don't know why
            argvi++;    // seems to signal the existence of a return value
        }
        XSRETURN(argvi);
        fail:
        (void) _swigerr;
    }
    croak(_swigerr);
}


XS(_wrap_GetOutgoingAnnotationSet) {
    dXSARGS;
    
    if (items == 1) {
            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_GetOutgoingAnnotationSet__SWIG_1); return;
    }
    if (items == 2) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_GetOutgoingAnnotationSet__SWIG_0); return;
    }
    
    croak("No matching function for overloaded 'GetOutgoingAnnotationSet'");
    XSRETURN(0);
}


XS(_wrap_GetAnchorSet) {
    char _swigmsg[SWIG_MAX_ERRMSG] = "";
    const char *_swigerr = _swigmsg;
    {
        std::string arg1 ;
        list<std::string > result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: GetAnchorSet(std::string);");
        }
        {
            if (!SvPOK((SV*) ST(0))) {
                SWIG_croak("Type error in argument 1 of GetAnchorSet. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(0), len);
                (&arg1)->assign(ptr, len);
            }
        }
        {
            try {
                result = GetAnchorSet(arg1);
                
            }
            catch (AGException& err) {
                string message = "AGException\x01";
                message += err.error();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::LoadError& err) {
                string message = "LoadError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::StoreError& err) {
                string message = "StoreError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
        }
        {
            AV* arr = newAV();
            list_to_array(result, arr);
            ST(argvi) = newRV_noinc((SV*)arr);
            sv_2mortal(ST(argvi));    // don't know why
            argvi++;    // seems to signal the existence of a return value
        }
        XSRETURN(argvi);
        fail:
        (void) _swigerr;
    }
    croak(_swigerr);
}


XS(_wrap_GetAnchorSetByOffset__SWIG_0) {
    char _swigmsg[SWIG_MAX_ERRMSG] = "";
    const char *_swigerr = _swigmsg;
    {
        std::string arg1 ;
        double arg2 ;
        double arg3 ;
        list<std::string > result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: GetAnchorSetByOffset(std::string,double,double);");
        }
        {
            if (!SvPOK((SV*) ST(0))) {
                SWIG_croak("Type error in argument 1 of GetAnchorSetByOffset. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(0), len);
                (&arg1)->assign(ptr, len);
            }
        }
        arg2 = (double) SvNV(ST(1));
        
        arg3 = (double) SvNV(ST(2));
        
        {
            try {
                result = GetAnchorSetByOffset(arg1,arg2,arg3);
                
            }
            catch (AGException& err) {
                string message = "AGException\x01";
                message += err.error();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::LoadError& err) {
                string message = "LoadError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::StoreError& err) {
                string message = "StoreError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
        }
        {
            AV* arr = newAV();
            list_to_array(result, arr);
            ST(argvi) = newRV_noinc((SV*)arr);
            sv_2mortal(ST(argvi));    // don't know why
            argvi++;    // seems to signal the existence of a return value
        }
        XSRETURN(argvi);
        fail:
        (void) _swigerr;
    }
    croak(_swigerr);
}


XS(_wrap_GetAnchorSetByOffset__SWIG_1) {
    char _swigmsg[SWIG_MAX_ERRMSG] = "";
    const char *_swigerr = _swigmsg;
    {
        std::string arg1 ;
        double arg2 ;
        list<std::string > result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: GetAnchorSetByOffset(std::string,double);");
        }
        {
            if (!SvPOK((SV*) ST(0))) {
                SWIG_croak("Type error in argument 1 of GetAnchorSetByOffset. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(0), len);
                (&arg1)->assign(ptr, len);
            }
        }
        arg2 = (double) SvNV(ST(1));
        
        {
            try {
                result = GetAnchorSetByOffset(arg1,arg2);
                
            }
            catch (AGException& err) {
                string message = "AGException\x01";
                message += err.error();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::LoadError& err) {
                string message = "LoadError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::StoreError& err) {
                string message = "StoreError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
        }
        {
            AV* arr = newAV();
            list_to_array(result, arr);
            ST(argvi) = newRV_noinc((SV*)arr);
            sv_2mortal(ST(argvi));    // don't know why
            argvi++;    // seems to signal the existence of a return value
        }
        XSRETURN(argvi);
        fail:
        (void) _swigerr;
    }
    croak(_swigerr);
}


XS(_wrap_GetAnchorSetByOffset) {
    dXSARGS;
    
    if (items == 2) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_GetAnchorSetByOffset__SWIG_1); return;
    }
    if (items == 3) {
                    (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_GetAnchorSetByOffset__SWIG_0); return;
    }
    
    croak("No matching function for overloaded 'GetAnchorSetByOffset'");
    XSRETURN(0);
}


XS(_wrap_GetAnchorSetNearestOffset) {
    char _swigmsg[SWIG_MAX_ERRMSG] = "";
    const char *_swigerr = _swigmsg;
    {
        std::string arg1 ;
        double arg2 ;
        set<std::string > result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: GetAnchorSetNearestOffset(std::string,double);");
        }
        {
            if (!SvPOK((SV*) ST(0))) {
                SWIG_croak("Type error in argument 1 of GetAnchorSetNearestOffset. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(0), len);
                (&arg1)->assign(ptr, len);
            }
        }
        arg2 = (double) SvNV(ST(1));
        
        {
            try {
                result = GetAnchorSetNearestOffset(arg1,arg2);
                
            }
            catch (AGException& err) {
                string message = "AGException\x01";
                message += err.error();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::LoadError& err) {
                string message = "LoadError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::StoreError& err) {
                string message = "StoreError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
        }
        {
            AV* arr = newAV();
            set_to_array(result, arr);
            ST(argvi) = newRV_noinc((SV*)arr);
            sv_2mortal(ST(argvi));    // don't know why
            argvi++;    // seems to signal the existence of a return value
        }
        XSRETURN(argvi);
        fail:
        (void) _swigerr;
    }
    croak(_swigerr);
}


XS(_wrap_GetAnnotationSet__SWIG_0) {
    char _swigmsg[SWIG_MAX_ERRMSG] = "";
    const char *_swigerr = _swigmsg;
    {
        std::string *arg1 = 0 ;
        std::string *arg2 = 0 ;
        set<std::string > result;
        std::string temp1 ;
        std::string temp2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: GetAnnotationSet(std::string const &,std::string const &);");
        }
        {
            if (!SvPOK((SV*) ST(0))) {
                SWIG_croak("Type error in argument 1 of GetAnnotationSet. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(0), len);
                temp1.assign(ptr, len);
                arg1 = &temp1;
            }
        }
        {
            if (!SvPOK((SV*) ST(1))) {
                SWIG_croak("Type error in argument 2 of GetAnnotationSet. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(1), len);
                temp2.assign(ptr, len);
                arg2 = &temp2;
            }
        }
        {
            try {
                result = GetAnnotationSet((std::string const &)*arg1,(std::string const &)*arg2);
                
            }
            catch (AGException& err) {
                string message = "AGException\x01";
                message += err.error();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::LoadError& err) {
                string message = "LoadError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::StoreError& err) {
                string message = "StoreError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
        }
        {
            AV* arr = newAV();
            set_to_array(result, arr);
            ST(argvi) = newRV_noinc((SV*)arr);
            sv_2mortal(ST(argvi));    // don't know why
            argvi++;    // seems to signal the existence of a return value
        }
        XSRETURN(argvi);
        fail:
        (void) _swigerr;
    }
    croak(_swigerr);
}


XS(_wrap_GetAnnotationSet__SWIG_1) {
    char _swigmsg[SWIG_MAX_ERRMSG] = "";
    const char *_swigerr = _swigmsg;
    {
        std::string *arg1 = 0 ;
        set<std::string > result;
        std::string temp1 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: GetAnnotationSet(std::string const &);");
        }
        {
            if (!SvPOK((SV*) ST(0))) {
                SWIG_croak("Type error in argument 1 of GetAnnotationSet. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(0), len);
                temp1.assign(ptr, len);
                arg1 = &temp1;
            }
        }
        {
            try {
                result = GetAnnotationSet((std::string const &)*arg1);
                
            }
            catch (AGException& err) {
                string message = "AGException\x01";
                message += err.error();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::LoadError& err) {
                string message = "LoadError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::StoreError& err) {
                string message = "StoreError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
        }
        {
            AV* arr = newAV();
            set_to_array(result, arr);
            ST(argvi) = newRV_noinc((SV*)arr);
            sv_2mortal(ST(argvi));    // don't know why
            argvi++;    // seems to signal the existence of a return value
        }
        XSRETURN(argvi);
        fail:
        (void) _swigerr;
    }
    croak(_swigerr);
}


XS(_wrap_GetAnnotationSet) {
    dXSARGS;
    
    if (items == 1) {
            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_GetAnnotationSet__SWIG_1); return;
    }
    if (items == 2) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_GetAnnotationSet__SWIG_0); return;
    }
    
    croak("No matching function for overloaded 'GetAnnotationSet'");
    XSRETURN(0);
}


XS(_wrap_GetAnnotationSetByFeature__SWIG_0) {
    char _swigmsg[SWIG_MAX_ERRMSG] = "";
    const char *_swigerr = _swigmsg;
    {
        std::string arg1 ;
        std::string arg2 ;
        std::string arg3 ;
        std::string *arg4 = 0 ;
        set<std::string > result;
        std::string temp4 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 4) || (items > 4)) {
            SWIG_croak("Usage: GetAnnotationSetByFeature(std::string,std::string,std::string,std::string const &);");
        }
        {
            if (!SvPOK((SV*) ST(0))) {
                SWIG_croak("Type error in argument 1 of GetAnnotationSetByFeature. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(0), len);
                (&arg1)->assign(ptr, len);
            }
        }
        {
            if (!SvPOK((SV*) ST(1))) {
                SWIG_croak("Type error in argument 2 of GetAnnotationSetByFeature. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(1), len);
                (&arg2)->assign(ptr, len);
            }
        }
        {
            if (!SvPOK((SV*) ST(2))) {
                SWIG_croak("Type error in argument 3 of GetAnnotationSetByFeature. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(2), len);
                (&arg3)->assign(ptr, len);
            }
        }
        {
            if (!SvPOK((SV*) ST(3))) {
                SWIG_croak("Type error in argument 4 of GetAnnotationSetByFeature. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(3), len);
                temp4.assign(ptr, len);
                arg4 = &temp4;
            }
        }
        {
            try {
                result = GetAnnotationSetByFeature(arg1,arg2,arg3,(std::string const &)*arg4);
                
            }
            catch (AGException& err) {
                string message = "AGException\x01";
                message += err.error();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::LoadError& err) {
                string message = "LoadError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::StoreError& err) {
                string message = "StoreError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
        }
        {
            AV* arr = newAV();
            set_to_array(result, arr);
            ST(argvi) = newRV_noinc((SV*)arr);
            sv_2mortal(ST(argvi));    // don't know why
            argvi++;    // seems to signal the existence of a return value
        }
        XSRETURN(argvi);
        fail:
        (void) _swigerr;
    }
    croak(_swigerr);
}


XS(_wrap_GetAnnotationSetByFeature__SWIG_1) {
    char _swigmsg[SWIG_MAX_ERRMSG] = "";
    const char *_swigerr = _swigmsg;
    {
        std::string arg1 ;
        std::string arg2 ;
        std::string arg3 ;
        set<std::string > result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: GetAnnotationSetByFeature(std::string,std::string,std::string);");
        }
        {
            if (!SvPOK((SV*) ST(0))) {
                SWIG_croak("Type error in argument 1 of GetAnnotationSetByFeature. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(0), len);
                (&arg1)->assign(ptr, len);
            }
        }
        {
            if (!SvPOK((SV*) ST(1))) {
                SWIG_croak("Type error in argument 2 of GetAnnotationSetByFeature. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(1), len);
                (&arg2)->assign(ptr, len);
            }
        }
        {
            if (!SvPOK((SV*) ST(2))) {
                SWIG_croak("Type error in argument 3 of GetAnnotationSetByFeature. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(2), len);
                (&arg3)->assign(ptr, len);
            }
        }
        {
            try {
                result = GetAnnotationSetByFeature(arg1,arg2,arg3);
                
            }
            catch (AGException& err) {
                string message = "AGException\x01";
                message += err.error();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::LoadError& err) {
                string message = "LoadError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::StoreError& err) {
                string message = "StoreError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
        }
        {
            AV* arr = newAV();
            set_to_array(result, arr);
            ST(argvi) = newRV_noinc((SV*)arr);
            sv_2mortal(ST(argvi));    // don't know why
            argvi++;    // seems to signal the existence of a return value
        }
        XSRETURN(argvi);
        fail:
        (void) _swigerr;
    }
    croak(_swigerr);
}


XS(_wrap_GetAnnotationSetByFeature) {
    dXSARGS;
    
    if (items == 3) {
                    (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_GetAnnotationSetByFeature__SWIG_1); return;
    }
    if (items == 4) {
                        (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_GetAnnotationSetByFeature__SWIG_0); return;
    }
    
    croak("No matching function for overloaded 'GetAnnotationSetByFeature'");
    XSRETURN(0);
}


XS(_wrap_GetAnnotationSetByOffset__SWIG_0) {
    char _swigmsg[SWIG_MAX_ERRMSG] = "";
    const char *_swigerr = _swigmsg;
    {
        std::string arg1 ;
        double arg2 ;
        std::string *arg3 = 0 ;
        list<std::string > result;
        std::string temp3 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: GetAnnotationSetByOffset(std::string,double,std::string const &);");
        }
        {
            if (!SvPOK((SV*) ST(0))) {
                SWIG_croak("Type error in argument 1 of GetAnnotationSetByOffset. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(0), len);
                (&arg1)->assign(ptr, len);
            }
        }
        arg2 = (double) SvNV(ST(1));
        
        {
            if (!SvPOK((SV*) ST(2))) {
                SWIG_croak("Type error in argument 3 of GetAnnotationSetByOffset. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(2), len);
                temp3.assign(ptr, len);
                arg3 = &temp3;
            }
        }
        {
            try {
                result = GetAnnotationSetByOffset(arg1,arg2,(std::string const &)*arg3);
                
            }
            catch (AGException& err) {
                string message = "AGException\x01";
                message += err.error();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::LoadError& err) {
                string message = "LoadError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::StoreError& err) {
                string message = "StoreError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
        }
        {
            AV* arr = newAV();
            list_to_array(result, arr);
            ST(argvi) = newRV_noinc((SV*)arr);
            sv_2mortal(ST(argvi));    // don't know why
            argvi++;    // seems to signal the existence of a return value
        }
        XSRETURN(argvi);
        fail:
        (void) _swigerr;
    }
    croak(_swigerr);
}


XS(_wrap_GetAnnotationSetByOffset__SWIG_1) {
    char _swigmsg[SWIG_MAX_ERRMSG] = "";
    const char *_swigerr = _swigmsg;
    {
        std::string arg1 ;
        double arg2 ;
        list<std::string > result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: GetAnnotationSetByOffset(std::string,double);");
        }
        {
            if (!SvPOK((SV*) ST(0))) {
                SWIG_croak("Type error in argument 1 of GetAnnotationSetByOffset. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(0), len);
                (&arg1)->assign(ptr, len);
            }
        }
        arg2 = (double) SvNV(ST(1));
        
        {
            try {
                result = GetAnnotationSetByOffset(arg1,arg2);
                
            }
            catch (AGException& err) {
                string message = "AGException\x01";
                message += err.error();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::LoadError& err) {
                string message = "LoadError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::StoreError& err) {
                string message = "StoreError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
        }
        {
            AV* arr = newAV();
            list_to_array(result, arr);
            ST(argvi) = newRV_noinc((SV*)arr);
            sv_2mortal(ST(argvi));    // don't know why
            argvi++;    // seems to signal the existence of a return value
        }
        XSRETURN(argvi);
        fail:
        (void) _swigerr;
    }
    croak(_swigerr);
}


XS(_wrap_GetAnnotationSetByOffset) {
    dXSARGS;
    
    if (items == 2) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_GetAnnotationSetByOffset__SWIG_1); return;
    }
    if (items == 3) {
                    (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_GetAnnotationSetByOffset__SWIG_0); return;
    }
    
    croak("No matching function for overloaded 'GetAnnotationSetByOffset'");
    XSRETURN(0);
}


XS(_wrap_GetAnnotationSeqByOffset__SWIG_0) {
    char _swigmsg[SWIG_MAX_ERRMSG] = "";
    const char *_swigerr = _swigmsg;
    {
        std::string arg1 ;
        double arg2 ;
        double arg3 ;
        std::string *arg4 = 0 ;
        list<std::string > result;
        std::string temp4 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 4) || (items > 4)) {
            SWIG_croak("Usage: GetAnnotationSeqByOffset(std::string,double,double,std::string const &);");
        }
        {
            if (!SvPOK((SV*) ST(0))) {
                SWIG_croak("Type error in argument 1 of GetAnnotationSeqByOffset. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(0), len);
                (&arg1)->assign(ptr, len);
            }
        }
        arg2 = (double) SvNV(ST(1));
        
        arg3 = (double) SvNV(ST(2));
        
        {
            if (!SvPOK((SV*) ST(3))) {
                SWIG_croak("Type error in argument 4 of GetAnnotationSeqByOffset. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(3), len);
                temp4.assign(ptr, len);
                arg4 = &temp4;
            }
        }
        {
            try {
                result = GetAnnotationSeqByOffset(arg1,arg2,arg3,(std::string const &)*arg4);
                
            }
            catch (AGException& err) {
                string message = "AGException\x01";
                message += err.error();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::LoadError& err) {
                string message = "LoadError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::StoreError& err) {
                string message = "StoreError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
        }
        {
            AV* arr = newAV();
            list_to_array(result, arr);
            ST(argvi) = newRV_noinc((SV*)arr);
            sv_2mortal(ST(argvi));    // don't know why
            argvi++;    // seems to signal the existence of a return value
        }
        XSRETURN(argvi);
        fail:
        (void) _swigerr;
    }
    croak(_swigerr);
}


XS(_wrap_GetAnnotationSeqByOffset__SWIG_1) {
    char _swigmsg[SWIG_MAX_ERRMSG] = "";
    const char *_swigerr = _swigmsg;
    {
        std::string arg1 ;
        double arg2 ;
        double arg3 ;
        list<std::string > result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: GetAnnotationSeqByOffset(std::string,double,double);");
        }
        {
            if (!SvPOK((SV*) ST(0))) {
                SWIG_croak("Type error in argument 1 of GetAnnotationSeqByOffset. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(0), len);
                (&arg1)->assign(ptr, len);
            }
        }
        arg2 = (double) SvNV(ST(1));
        
        arg3 = (double) SvNV(ST(2));
        
        {
            try {
                result = GetAnnotationSeqByOffset(arg1,arg2,arg3);
                
            }
            catch (AGException& err) {
                string message = "AGException\x01";
                message += err.error();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::LoadError& err) {
                string message = "LoadError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::StoreError& err) {
                string message = "StoreError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
        }
        {
            AV* arr = newAV();
            list_to_array(result, arr);
            ST(argvi) = newRV_noinc((SV*)arr);
            sv_2mortal(ST(argvi));    // don't know why
            argvi++;    // seems to signal the existence of a return value
        }
        XSRETURN(argvi);
        fail:
        (void) _swigerr;
    }
    croak(_swigerr);
}


XS(_wrap_GetAnnotationSeqByOffset__SWIG_2) {
    char _swigmsg[SWIG_MAX_ERRMSG] = "";
    const char *_swigerr = _swigmsg;
    {
        std::string arg1 ;
        double arg2 ;
        list<std::string > result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: GetAnnotationSeqByOffset(std::string,double);");
        }
        {
            if (!SvPOK((SV*) ST(0))) {
                SWIG_croak("Type error in argument 1 of GetAnnotationSeqByOffset. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(0), len);
                (&arg1)->assign(ptr, len);
            }
        }
        arg2 = (double) SvNV(ST(1));
        
        {
            try {
                result = GetAnnotationSeqByOffset(arg1,arg2);
                
            }
            catch (AGException& err) {
                string message = "AGException\x01";
                message += err.error();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::LoadError& err) {
                string message = "LoadError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::StoreError& err) {
                string message = "StoreError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
        }
        {
            AV* arr = newAV();
            list_to_array(result, arr);
            ST(argvi) = newRV_noinc((SV*)arr);
            sv_2mortal(ST(argvi));    // don't know why
            argvi++;    // seems to signal the existence of a return value
        }
        XSRETURN(argvi);
        fail:
        (void) _swigerr;
    }
    croak(_swigerr);
}


XS(_wrap_GetAnnotationSeqByOffset__SWIG_3) {
    char _swigmsg[SWIG_MAX_ERRMSG] = "";
    const char *_swigerr = _swigmsg;
    {
        std::string arg1 ;
        list<std::string > result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: GetAnnotationSeqByOffset(std::string);");
        }
        {
            if (!SvPOK((SV*) ST(0))) {
                SWIG_croak("Type error in argument 1 of GetAnnotationSeqByOffset. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(0), len);
                (&arg1)->assign(ptr, len);
            }
        }
        {
            try {
                result = GetAnnotationSeqByOffset(arg1);
                
            }
            catch (AGException& err) {
                string message = "AGException\x01";
                message += err.error();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::LoadError& err) {
                string message = "LoadError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::StoreError& err) {
                string message = "StoreError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
        }
        {
            AV* arr = newAV();
            list_to_array(result, arr);
            ST(argvi) = newRV_noinc((SV*)arr);
            sv_2mortal(ST(argvi));    // don't know why
            argvi++;    // seems to signal the existence of a return value
        }
        XSRETURN(argvi);
        fail:
        (void) _swigerr;
    }
    croak(_swigerr);
}


XS(_wrap_GetAnnotationSeqByOffset) {
    dXSARGS;
    
    if (items == 1) {
            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_GetAnnotationSeqByOffset__SWIG_3); return;
    }
    if (items == 2) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_GetAnnotationSeqByOffset__SWIG_2); return;
    }
    if (items == 3) {
                    (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_GetAnnotationSeqByOffset__SWIG_1); return;
    }
    if (items == 4) {
                        (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_GetAnnotationSeqByOffset__SWIG_0); return;
    }
    
    croak("No matching function for overloaded 'GetAnnotationSeqByOffset'");
    XSRETURN(0);
}


XS(_wrap_GetAnnotationByOffset__SWIG_0) {
    char _swigmsg[SWIG_MAX_ERRMSG] = "";
    const char *_swigerr = _swigmsg;
    {
        std::string arg1 ;
        double arg2 ;
        std::string *arg3 = 0 ;
        std::string result;
        std::string temp3 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: GetAnnotationByOffset(std::string,double,std::string const &);");
        }
        {
            if (!SvPOK((SV*) ST(0))) {
                SWIG_croak("Type error in argument 1 of GetAnnotationByOffset. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(0), len);
                (&arg1)->assign(ptr, len);
            }
        }
        arg2 = (double) SvNV(ST(1));
        
        {
            if (!SvPOK((SV*) ST(2))) {
                SWIG_croak("Type error in argument 3 of GetAnnotationByOffset. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(2), len);
                temp3.assign(ptr, len);
                arg3 = &temp3;
            }
        }
        {
            try {
                result = GetAnnotationByOffset(arg1,arg2,(std::string const &)*arg3);
                
            }
            catch (AGException& err) {
                string message = "AGException\x01";
                message += err.error();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::LoadError& err) {
                string message = "LoadError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::StoreError& err) {
                string message = "StoreError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
        }
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        (void) _swigerr;
    }
    croak(_swigerr);
}


XS(_wrap_GetAnnotationByOffset__SWIG_1) {
    char _swigmsg[SWIG_MAX_ERRMSG] = "";
    const char *_swigerr = _swigmsg;
    {
        std::string arg1 ;
        double arg2 ;
        std::string result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: GetAnnotationByOffset(std::string,double);");
        }
        {
            if (!SvPOK((SV*) ST(0))) {
                SWIG_croak("Type error in argument 1 of GetAnnotationByOffset. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(0), len);
                (&arg1)->assign(ptr, len);
            }
        }
        arg2 = (double) SvNV(ST(1));
        
        {
            try {
                result = GetAnnotationByOffset(arg1,arg2);
                
            }
            catch (AGException& err) {
                string message = "AGException\x01";
                message += err.error();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::LoadError& err) {
                string message = "LoadError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::StoreError& err) {
                string message = "StoreError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
        }
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        (void) _swigerr;
    }
    croak(_swigerr);
}


XS(_wrap_GetAnnotationByOffset) {
    dXSARGS;
    
    if (items == 2) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_GetAnnotationByOffset__SWIG_1); return;
    }
    if (items == 3) {
                    (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_GetAnnotationByOffset__SWIG_0); return;
    }
    
    croak("No matching function for overloaded 'GetAnnotationByOffset'");
    XSRETURN(0);
}


XS(_wrap_GetAGSetId__SWIG_0) {
    char _swigmsg[SWIG_MAX_ERRMSG] = "";
    const char *_swigerr = _swigmsg;
    {
        std::string arg1 ;
        std::string result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: GetAGSetId(std::string);");
        }
        {
            if (!SvPOK((SV*) ST(0))) {
                SWIG_croak("Type error in argument 1 of GetAGSetId. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(0), len);
                (&arg1)->assign(ptr, len);
            }
        }
        {
            try {
                result = GetAGSetId(arg1);
                
            }
            catch (AGException& err) {
                string message = "AGException\x01";
                message += err.error();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::LoadError& err) {
                string message = "LoadError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::StoreError& err) {
                string message = "StoreError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
        }
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        (void) _swigerr;
    }
    croak(_swigerr);
}


XS(_wrap_GetAGSetId__SWIG_1) {
    char _swigmsg[SWIG_MAX_ERRMSG] = "";
    const char *_swigerr = _swigmsg;
    {
        std::string result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: GetAGSetId();");
        }
        {
            try {
                result = GetAGSetId();
                
            }
            catch (AGException& err) {
                string message = "AGException\x01";
                message += err.error();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::LoadError& err) {
                string message = "LoadError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::StoreError& err) {
                string message = "StoreError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
        }
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        (void) _swigerr;
    }
    croak(_swigerr);
}


XS(_wrap_GetAGSetId) {
    dXSARGS;
    
    if (items == 0) {
        (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_GetAGSetId__SWIG_1); return;
    }
    if (items == 1) {
            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_GetAGSetId__SWIG_0); return;
    }
    
    croak("No matching function for overloaded 'GetAGSetId'");
    XSRETURN(0);
}


XS(_wrap_GetAGId) {
    char _swigmsg[SWIG_MAX_ERRMSG] = "";
    const char *_swigerr = _swigmsg;
    {
        std::string arg1 ;
        std::string result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: GetAGId(std::string);");
        }
        {
            if (!SvPOK((SV*) ST(0))) {
                SWIG_croak("Type error in argument 1 of GetAGId. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(0), len);
                (&arg1)->assign(ptr, len);
            }
        }
        {
            try {
                result = GetAGId(arg1);
                
            }
            catch (AGException& err) {
                string message = "AGException\x01";
                message += err.error();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::LoadError& err) {
                string message = "LoadError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::StoreError& err) {
                string message = "StoreError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
        }
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        (void) _swigerr;
    }
    croak(_swigerr);
}


XS(_wrap_GetTimelineId) {
    char _swigmsg[SWIG_MAX_ERRMSG] = "";
    const char *_swigerr = _swigmsg;
    {
        std::string arg1 ;
        std::string result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: GetTimelineId(std::string);");
        }
        {
            if (!SvPOK((SV*) ST(0))) {
                SWIG_croak("Type error in argument 1 of GetTimelineId. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(0), len);
                (&arg1)->assign(ptr, len);
            }
        }
        {
            try {
                result = GetTimelineId(arg1);
                
            }
            catch (AGException& err) {
                string message = "AGException\x01";
                message += err.error();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::LoadError& err) {
                string message = "LoadError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::StoreError& err) {
                string message = "StoreError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
        }
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        (void) _swigerr;
    }
    croak(_swigerr);
}


XS(_wrap_toXML) {
    char _swigmsg[SWIG_MAX_ERRMSG] = "";
    const char *_swigerr = _swigmsg;
    {
        std::string arg1 ;
        std::string result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: toXML(std::string);");
        }
        {
            if (!SvPOK((SV*) ST(0))) {
                SWIG_croak("Type error in argument 1 of toXML. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(0), len);
                (&arg1)->assign(ptr, len);
            }
        }
        {
            try {
                result = toXML(arg1);
                
            }
            catch (AGException& err) {
                string message = "AGException\x01";
                message += err.error();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::LoadError& err) {
                string message = "LoadError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::StoreError& err) {
                string message = "StoreError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
        }
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        (void) _swigerr;
    }
    croak(_swigerr);
}



#ifdef AGDB

XS(_wrap_LoadFromDB) {
    char _swigmsg[SWIG_MAX_ERRMSG] = "";
    const char *_swigerr = _swigmsg;
    {
        std::string arg1 ;
        std::string arg2 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: LoadFromDB(std::string,std::string);");
        }
        {
            if (!SvPOK((SV*) ST(0))) {
                SWIG_croak("Type error in argument 1 of LoadFromDB. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(0), len);
                (&arg1)->assign(ptr, len);
            }
        }
        {
            if (!SvPOK((SV*) ST(1))) {
                SWIG_croak("Type error in argument 2 of LoadFromDB. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(1), len);
                (&arg2)->assign(ptr, len);
            }
        }
        {
            try {
                result = (bool)LoadFromDB(arg1,arg2);
                
            }
            catch (AGException& err) {
                string message = "AGException\x01";
                message += err.error();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::LoadError& err) {
                string message = "LoadError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::StoreError& err) {
                string message = "StoreError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        (void) _swigerr;
    }
    croak(_swigerr);
}


XS(_wrap_StoreToDB) {
    char _swigmsg[SWIG_MAX_ERRMSG] = "";
    const char *_swigerr = _swigmsg;
    {
        std::string arg1 ;
        std::string arg2 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: StoreToDB(std::string,std::string);");
        }
        {
            if (!SvPOK((SV*) ST(0))) {
                SWIG_croak("Type error in argument 1 of StoreToDB. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(0), len);
                (&arg1)->assign(ptr, len);
            }
        }
        {
            if (!SvPOK((SV*) ST(1))) {
                SWIG_croak("Type error in argument 2 of StoreToDB. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(1), len);
                (&arg2)->assign(ptr, len);
            }
        }
        {
            try {
                result = (bool)StoreToDB(arg1,arg2);
                
            }
            catch (AGException& err) {
                string message = "AGException\x01";
                message += err.error();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::LoadError& err) {
                string message = "LoadError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::StoreError& err) {
                string message = "StoreError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        (void) _swigerr;
    }
    croak(_swigerr);
}


XS(_wrap_StoreSQLs) {
    char _swigmsg[SWIG_MAX_ERRMSG] = "";
    const char *_swigerr = _swigmsg;
    {
        std::string arg1 ;
        list<std::string > result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: StoreSQLs(std::string);");
        }
        {
            if (!SvPOK((SV*) ST(0))) {
                SWIG_croak("Type error in argument 1 of StoreSQLs. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(0), len);
                (&arg1)->assign(ptr, len);
            }
        }
        {
            try {
                result = StoreSQLs(arg1);
                
            }
            catch (AGException& err) {
                string message = "AGException\x01";
                message += err.error();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::LoadError& err) {
                string message = "LoadError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::StoreError& err) {
                string message = "StoreError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
        }
        {
            AV* arr = newAV();
            list_to_array(result, arr);
            ST(argvi) = newRV_noinc((SV*)arr);
            sv_2mortal(ST(argvi));    // don't know why
            argvi++;    // seems to signal the existence of a return value
        }
        XSRETURN(argvi);
        fail:
        (void) _swigerr;
    }
    croak(_swigerr);
}



#endif

XS(_wrap_SPrecedes) {
    char _swigmsg[SWIG_MAX_ERRMSG] = "";
    const char *_swigerr = _swigmsg;
    {
        std::string *arg1 = 0 ;
        std::string *arg2 = 0 ;
        bool result;
        std::string temp1 ;
        std::string temp2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: SPrecedes(std::string const &,std::string const &);");
        }
        {
            if (!SvPOK((SV*) ST(0))) {
                SWIG_croak("Type error in argument 1 of SPrecedes. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(0), len);
                temp1.assign(ptr, len);
                arg1 = &temp1;
            }
        }
        {
            if (!SvPOK((SV*) ST(1))) {
                SWIG_croak("Type error in argument 2 of SPrecedes. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(1), len);
                temp2.assign(ptr, len);
                arg2 = &temp2;
            }
        }
        {
            try {
                result = (bool)SPrecedes((std::string const &)*arg1,(std::string const &)*arg2);
                
            }
            catch (AGException& err) {
                string message = "AGException\x01";
                message += err.error();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::LoadError& err) {
                string message = "LoadError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::StoreError& err) {
                string message = "StoreError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        (void) _swigerr;
    }
    croak(_swigerr);
}


XS(_wrap_Load__SWIG_0) {
    char _swigmsg[SWIG_MAX_ERRMSG] = "";
    const char *_swigerr = _swigmsg;
    {
        std::string *arg1 = 0 ;
        std::string *arg2 = 0 ;
        std::string *arg3 = 0 ;
        map<std::string,std::string > *arg4 = (map<std::string,std::string > *) 0 ;
        map<std::string,std::string > *arg5 = (map<std::string,std::string > *) 0 ;
        list<std::string > result;
        std::string temp1 ;
        std::string temp2 ;
        std::string temp3 ;
        map<std::string,std::string > temp4 ;
        map<std::string,std::string > temp5 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 5) || (items > 5)) {
            SWIG_croak("Usage: Load(std::string const &,std::string const &,std::string const &,map<std::string,std::string > *,map<std::string,std::string > *);");
        }
        {
            if (!SvPOK((SV*) ST(0))) {
                SWIG_croak("Type error in argument 1 of Load. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(0), len);
                temp1.assign(ptr, len);
                arg1 = &temp1;
            }
        }
        {
            if (!SvPOK((SV*) ST(1))) {
                SWIG_croak("Type error in argument 2 of Load. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(1), len);
                temp2.assign(ptr, len);
                arg2 = &temp2;
            }
        }
        {
            if (!SvPOK((SV*) ST(2))) {
                SWIG_croak("Type error in argument 3 of Load. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(2), len);
                temp3.assign(ptr, len);
                arg3 = &temp3;
            }
        }
        {
            if (SvROK(ST(3))) {
                // expecting a reference
                HV* hv = (HV*)SvRV(ST(3));
                if (SvTYPE(hv) != SVt_PVHV)
                SWIG_croak("Type error in argument 4, of Load. "
                "Expected a reference to a hash of string");
                hash_to_map(hv, temp4);
                arg4 = &temp4;
            }
            else {
                SWIG_croak("Type error in argument 4 of $sysname. "
                "Expected a reference to a hash of string");
            }
        }
        {
            if (SvROK(ST(4))) {
                // expecting a reference
                HV* hv = (HV*)SvRV(ST(4));
                if (SvTYPE(hv) != SVt_PVHV)
                SWIG_croak("Type error in argument 5, of Load. "
                "Expected a reference to a hash of string");
                hash_to_map(hv, temp5);
                arg5 = &temp5;
            }
            else {
                SWIG_croak("Type error in argument 5 of $sysname. "
                "Expected a reference to a hash of string");
            }
        }
        {
            try {
                result = Load((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,arg4,arg5);
                
            }
            catch (AGException& err) {
                string message = "AGException\x01";
                message += err.error();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::LoadError& err) {
                string message = "LoadError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::StoreError& err) {
                string message = "StoreError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
        }
        {
            AV* arr = newAV();
            list_to_array(result, arr);
            ST(argvi) = newRV_noinc((SV*)arr);
            sv_2mortal(ST(argvi));    // don't know why
            argvi++;    // seems to signal the existence of a return value
        }
        XSRETURN(argvi);
        fail:
        (void) _swigerr;
    }
    croak(_swigerr);
}


XS(_wrap_Load__SWIG_1) {
    char _swigmsg[SWIG_MAX_ERRMSG] = "";
    const char *_swigerr = _swigmsg;
    {
        std::string *arg1 = 0 ;
        std::string *arg2 = 0 ;
        std::string *arg3 = 0 ;
        map<std::string,std::string > *arg4 = (map<std::string,std::string > *) 0 ;
        list<std::string > result;
        std::string temp1 ;
        std::string temp2 ;
        std::string temp3 ;
        map<std::string,std::string > temp4 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 4) || (items > 4)) {
            SWIG_croak("Usage: Load(std::string const &,std::string const &,std::string const &,map<std::string,std::string > *);");
        }
        {
            if (!SvPOK((SV*) ST(0))) {
                SWIG_croak("Type error in argument 1 of Load. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(0), len);
                temp1.assign(ptr, len);
                arg1 = &temp1;
            }
        }
        {
            if (!SvPOK((SV*) ST(1))) {
                SWIG_croak("Type error in argument 2 of Load. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(1), len);
                temp2.assign(ptr, len);
                arg2 = &temp2;
            }
        }
        {
            if (!SvPOK((SV*) ST(2))) {
                SWIG_croak("Type error in argument 3 of Load. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(2), len);
                temp3.assign(ptr, len);
                arg3 = &temp3;
            }
        }
        {
            if (SvROK(ST(3))) {
                // expecting a reference
                HV* hv = (HV*)SvRV(ST(3));
                if (SvTYPE(hv) != SVt_PVHV)
                SWIG_croak("Type error in argument 4, of Load. "
                "Expected a reference to a hash of string");
                hash_to_map(hv, temp4);
                arg4 = &temp4;
            }
            else {
                SWIG_croak("Type error in argument 4 of $sysname. "
                "Expected a reference to a hash of string");
            }
        }
        {
            try {
                result = Load((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,arg4);
                
            }
            catch (AGException& err) {
                string message = "AGException\x01";
                message += err.error();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::LoadError& err) {
                string message = "LoadError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::StoreError& err) {
                string message = "StoreError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
        }
        {
            AV* arr = newAV();
            list_to_array(result, arr);
            ST(argvi) = newRV_noinc((SV*)arr);
            sv_2mortal(ST(argvi));    // don't know why
            argvi++;    // seems to signal the existence of a return value
        }
        XSRETURN(argvi);
        fail:
        (void) _swigerr;
    }
    croak(_swigerr);
}


XS(_wrap_Load__SWIG_2) {
    char _swigmsg[SWIG_MAX_ERRMSG] = "";
    const char *_swigerr = _swigmsg;
    {
        std::string *arg1 = 0 ;
        std::string *arg2 = 0 ;
        std::string *arg3 = 0 ;
        list<std::string > result;
        std::string temp1 ;
        std::string temp2 ;
        std::string temp3 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: Load(std::string const &,std::string const &,std::string const &);");
        }
        {
            if (!SvPOK((SV*) ST(0))) {
                SWIG_croak("Type error in argument 1 of Load. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(0), len);
                temp1.assign(ptr, len);
                arg1 = &temp1;
            }
        }
        {
            if (!SvPOK((SV*) ST(1))) {
                SWIG_croak("Type error in argument 2 of Load. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(1), len);
                temp2.assign(ptr, len);
                arg2 = &temp2;
            }
        }
        {
            if (!SvPOK((SV*) ST(2))) {
                SWIG_croak("Type error in argument 3 of Load. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(2), len);
                temp3.assign(ptr, len);
                arg3 = &temp3;
            }
        }
        {
            try {
                result = Load((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
                
            }
            catch (AGException& err) {
                string message = "AGException\x01";
                message += err.error();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::LoadError& err) {
                string message = "LoadError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::StoreError& err) {
                string message = "StoreError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
        }
        {
            AV* arr = newAV();
            list_to_array(result, arr);
            ST(argvi) = newRV_noinc((SV*)arr);
            sv_2mortal(ST(argvi));    // don't know why
            argvi++;    // seems to signal the existence of a return value
        }
        XSRETURN(argvi);
        fail:
        (void) _swigerr;
    }
    croak(_swigerr);
}


XS(_wrap_Load__SWIG_3) {
    char _swigmsg[SWIG_MAX_ERRMSG] = "";
    const char *_swigerr = _swigmsg;
    {
        std::string *arg1 = 0 ;
        std::string *arg2 = 0 ;
        list<std::string > result;
        std::string temp1 ;
        std::string temp2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: Load(std::string const &,std::string const &);");
        }
        {
            if (!SvPOK((SV*) ST(0))) {
                SWIG_croak("Type error in argument 1 of Load. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(0), len);
                temp1.assign(ptr, len);
                arg1 = &temp1;
            }
        }
        {
            if (!SvPOK((SV*) ST(1))) {
                SWIG_croak("Type error in argument 2 of Load. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(1), len);
                temp2.assign(ptr, len);
                arg2 = &temp2;
            }
        }
        {
            try {
                result = Load((std::string const &)*arg1,(std::string const &)*arg2);
                
            }
            catch (AGException& err) {
                string message = "AGException\x01";
                message += err.error();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::LoadError& err) {
                string message = "LoadError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::StoreError& err) {
                string message = "StoreError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
        }
        {
            AV* arr = newAV();
            list_to_array(result, arr);
            ST(argvi) = newRV_noinc((SV*)arr);
            sv_2mortal(ST(argvi));    // don't know why
            argvi++;    // seems to signal the existence of a return value
        }
        XSRETURN(argvi);
        fail:
        (void) _swigerr;
    }
    croak(_swigerr);
}


XS(_wrap_Load) {
    dXSARGS;
    
    if (items == 2) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_Load__SWIG_3); return;
    }
    if (items == 3) {
                    (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_Load__SWIG_2); return;
    }
    if (items == 4) {
                        (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_Load__SWIG_1); return;
    }
    if (items == 5) {
                            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_Load__SWIG_0); return;
    }
    
    croak("No matching function for overloaded 'Load'");
    XSRETURN(0);
}


XS(_wrap_Store__SWIG_0) {
    char _swigmsg[SWIG_MAX_ERRMSG] = "";
    const char *_swigerr = _swigmsg;
    {
        std::string *arg1 = 0 ;
        std::string *arg2 = 0 ;
        std::string *arg3 = 0 ;
        map<std::string,std::string > *arg4 = (map<std::string,std::string > *) 0 ;
        std::string result;
        std::string temp1 ;
        std::string temp2 ;
        std::string temp3 ;
        map<std::string,std::string > temp4 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 4) || (items > 4)) {
            SWIG_croak("Usage: Store(std::string const &,std::string const &,std::string const &,map<std::string,std::string > *);");
        }
        {
            if (!SvPOK((SV*) ST(0))) {
                SWIG_croak("Type error in argument 1 of Store. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(0), len);
                temp1.assign(ptr, len);
                arg1 = &temp1;
            }
        }
        {
            if (!SvPOK((SV*) ST(1))) {
                SWIG_croak("Type error in argument 2 of Store. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(1), len);
                temp2.assign(ptr, len);
                arg2 = &temp2;
            }
        }
        {
            if (!SvPOK((SV*) ST(2))) {
                SWIG_croak("Type error in argument 3 of Store. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(2), len);
                temp3.assign(ptr, len);
                arg3 = &temp3;
            }
        }
        {
            if (SvROK(ST(3))) {
                // expecting a reference
                HV* hv = (HV*)SvRV(ST(3));
                if (SvTYPE(hv) != SVt_PVHV)
                SWIG_croak("Type error in argument 4, of Store. "
                "Expected a reference to a hash of string");
                hash_to_map(hv, temp4);
                arg4 = &temp4;
            }
            else {
                SWIG_croak("Type error in argument 4 of $sysname. "
                "Expected a reference to a hash of string");
            }
        }
        {
            try {
                result = Store((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,arg4);
                
            }
            catch (AGException& err) {
                string message = "AGException\x01";
                message += err.error();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::LoadError& err) {
                string message = "LoadError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::StoreError& err) {
                string message = "StoreError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
        }
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        (void) _swigerr;
    }
    croak(_swigerr);
}


XS(_wrap_Store__SWIG_1) {
    char _swigmsg[SWIG_MAX_ERRMSG] = "";
    const char *_swigerr = _swigmsg;
    {
        std::string *arg1 = 0 ;
        std::string *arg2 = 0 ;
        std::string *arg3 = 0 ;
        std::string result;
        std::string temp1 ;
        std::string temp2 ;
        std::string temp3 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: Store(std::string const &,std::string const &,std::string const &);");
        }
        {
            if (!SvPOK((SV*) ST(0))) {
                SWIG_croak("Type error in argument 1 of Store. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(0), len);
                temp1.assign(ptr, len);
                arg1 = &temp1;
            }
        }
        {
            if (!SvPOK((SV*) ST(1))) {
                SWIG_croak("Type error in argument 2 of Store. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(1), len);
                temp2.assign(ptr, len);
                arg2 = &temp2;
            }
        }
        {
            if (!SvPOK((SV*) ST(2))) {
                SWIG_croak("Type error in argument 3 of Store. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(2), len);
                temp3.assign(ptr, len);
                arg3 = &temp3;
            }
        }
        {
            try {
                result = Store((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
                
            }
            catch (AGException& err) {
                string message = "AGException\x01";
                message += err.error();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::LoadError& err) {
                string message = "LoadError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::StoreError& err) {
                string message = "StoreError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
        }
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        (void) _swigerr;
    }
    croak(_swigerr);
}


XS(_wrap_Store) {
    dXSARGS;
    
    if (items == 3) {
                    (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_Store__SWIG_1); return;
    }
    if (items == 4) {
                        (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_Store__SWIG_0); return;
    }
    
    croak("No matching function for overloaded 'Store'");
    XSRETURN(0);
}


XS(_wrap_Store2__SWIG_0) {
    char _swigmsg[SWIG_MAX_ERRMSG] = "";
    const char *_swigerr = _swigmsg;
    {
        std::string *arg1 = 0 ;
        std::string *arg2 = 0 ;
        list<std::string > *arg3 = (list<std::string > *) (list<std::string > *)0 ;
        map<std::string,std::string > *arg4 = (map<std::string,std::string > *) 0 ;
        std::string result;
        std::string temp1 ;
        std::string temp2 ;
        list<std::string > temp3 ;
        map<std::string,std::string > temp4 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 4) || (items > 4)) {
            SWIG_croak("Usage: Store2(std::string const &,std::string const &,list<std::string > *const,map<std::string,std::string > *);");
        }
        {
            if (!SvPOK((SV*) ST(0))) {
                SWIG_croak("Type error in argument 1 of Store2. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(0), len);
                temp1.assign(ptr, len);
                arg1 = &temp1;
            }
        }
        {
            if (!SvPOK((SV*) ST(1))) {
                SWIG_croak("Type error in argument 2 of Store2. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(1), len);
                temp2.assign(ptr, len);
                arg2 = &temp2;
            }
        }
        {
            if (SvROK(ST(2))) {
                // ROK: expecting a reference, not array
                AV *av = (AV*)SvRV(ST(2));
                if (SvTYPE(av) != SVt_PVAV)
                SWIG_croak("Type error in argument 3, of Store2. "
                "Expected an array of string");
                array_to_list(av, temp3);
                arg3 = &temp3;
            }
            else {
                SWIG_croak("Type error in argument 3 of $sysname. "
                "Expected an array of string");
            }
        }
        {
            if (SvROK(ST(3))) {
                // expecting a reference
                HV* hv = (HV*)SvRV(ST(3));
                if (SvTYPE(hv) != SVt_PVHV)
                SWIG_croak("Type error in argument 4, of Store2. "
                "Expected a reference to a hash of string");
                hash_to_map(hv, temp4);
                arg4 = &temp4;
            }
            else {
                SWIG_croak("Type error in argument 4 of $sysname. "
                "Expected a reference to a hash of string");
            }
        }
        {
            try {
                result = Store2((std::string const &)*arg1,(std::string const &)*arg2,arg3,arg4);
                
            }
            catch (AGException& err) {
                string message = "AGException\x01";
                message += err.error();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::LoadError& err) {
                string message = "LoadError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::StoreError& err) {
                string message = "StoreError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
        }
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        (void) _swigerr;
    }
    croak(_swigerr);
}


XS(_wrap_Store2__SWIG_1) {
    char _swigmsg[SWIG_MAX_ERRMSG] = "";
    const char *_swigerr = _swigmsg;
    {
        std::string *arg1 = 0 ;
        std::string *arg2 = 0 ;
        list<std::string > *arg3 = (list<std::string > *) (list<std::string > *)0 ;
        std::string result;
        std::string temp1 ;
        std::string temp2 ;
        list<std::string > temp3 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: Store2(std::string const &,std::string const &,list<std::string > *const);");
        }
        {
            if (!SvPOK((SV*) ST(0))) {
                SWIG_croak("Type error in argument 1 of Store2. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(0), len);
                temp1.assign(ptr, len);
                arg1 = &temp1;
            }
        }
        {
            if (!SvPOK((SV*) ST(1))) {
                SWIG_croak("Type error in argument 2 of Store2. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(1), len);
                temp2.assign(ptr, len);
                arg2 = &temp2;
            }
        }
        {
            if (SvROK(ST(2))) {
                // ROK: expecting a reference, not array
                AV *av = (AV*)SvRV(ST(2));
                if (SvTYPE(av) != SVt_PVAV)
                SWIG_croak("Type error in argument 3, of Store2. "
                "Expected an array of string");
                array_to_list(av, temp3);
                arg3 = &temp3;
            }
            else {
                SWIG_croak("Type error in argument 3 of $sysname. "
                "Expected an array of string");
            }
        }
        {
            try {
                result = Store2((std::string const &)*arg1,(std::string const &)*arg2,arg3);
                
            }
            catch (AGException& err) {
                string message = "AGException\x01";
                message += err.error();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::LoadError& err) {
                string message = "LoadError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::StoreError& err) {
                string message = "StoreError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
        }
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        (void) _swigerr;
    }
    croak(_swigerr);
}


XS(_wrap_Store2) {
    dXSARGS;
    
    if (items == 3) {
                    (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_Store2__SWIG_1); return;
    }
    if (items == 4) {
                        (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_Store2__SWIG_0); return;
    }
    
    croak("No matching function for overloaded 'Store2'");
    XSRETURN(0);
}


XS(_wrap_CheckAnchorOffsetTotal) {
    char _swigmsg[SWIG_MAX_ERRMSG] = "";
    const char *_swigerr = _swigmsg;
    {
        std::string arg1 ;
        std::string arg2 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CheckAnchorOffsetTotal(std::string,std::string);");
        }
        {
            if (!SvPOK((SV*) ST(0))) {
                SWIG_croak("Type error in argument 1 of CheckAnchorOffsetTotal. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(0), len);
                (&arg1)->assign(ptr, len);
            }
        }
        {
            if (!SvPOK((SV*) ST(1))) {
                SWIG_croak("Type error in argument 2 of CheckAnchorOffsetTotal. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(1), len);
                (&arg2)->assign(ptr, len);
            }
        }
        {
            try {
                result = (bool)CheckAnchorOffsetTotal(arg1,arg2);
                
            }
            catch (AGException& err) {
                string message = "AGException\x01";
                message += err.error();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::LoadError& err) {
                string message = "LoadError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::StoreError& err) {
                string message = "StoreError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        (void) _swigerr;
    }
    croak(_swigerr);
}


XS(_wrap_CheckAnchorOffsetBounded) {
    char _swigmsg[SWIG_MAX_ERRMSG] = "";
    const char *_swigerr = _swigmsg;
    {
        std::string arg1 ;
        std::string arg2 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CheckAnchorOffsetBounded(std::string,std::string);");
        }
        {
            if (!SvPOK((SV*) ST(0))) {
                SWIG_croak("Type error in argument 1 of CheckAnchorOffsetBounded. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(0), len);
                (&arg1)->assign(ptr, len);
            }
        }
        {
            if (!SvPOK((SV*) ST(1))) {
                SWIG_croak("Type error in argument 2 of CheckAnchorOffsetBounded. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(1), len);
                (&arg2)->assign(ptr, len);
            }
        }
        {
            try {
                result = (bool)CheckAnchorOffsetBounded(arg1,arg2);
                
            }
            catch (AGException& err) {
                string message = "AGException\x01";
                message += err.error();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::LoadError& err) {
                string message = "LoadError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::StoreError& err) {
                string message = "StoreError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        (void) _swigerr;
    }
    croak(_swigerr);
}


XS(_wrap_CheckFeatureExists) {
    char _swigmsg[SWIG_MAX_ERRMSG] = "";
    const char *_swigerr = _swigmsg;
    {
        std::string arg1 ;
        std::string arg2 ;
        std::string arg3 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: CheckFeatureExists(std::string,std::string,std::string);");
        }
        {
            if (!SvPOK((SV*) ST(0))) {
                SWIG_croak("Type error in argument 1 of CheckFeatureExists. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(0), len);
                (&arg1)->assign(ptr, len);
            }
        }
        {
            if (!SvPOK((SV*) ST(1))) {
                SWIG_croak("Type error in argument 2 of CheckFeatureExists. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(1), len);
                (&arg2)->assign(ptr, len);
            }
        }
        {
            if (!SvPOK((SV*) ST(2))) {
                SWIG_croak("Type error in argument 3 of CheckFeatureExists. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(2), len);
                (&arg3)->assign(ptr, len);
            }
        }
        {
            try {
                result = (bool)CheckFeatureExists(arg1,arg2,arg3);
                
            }
            catch (AGException& err) {
                string message = "AGException\x01";
                message += err.error();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::LoadError& err) {
                string message = "LoadError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::StoreError& err) {
                string message = "StoreError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        (void) _swigerr;
    }
    croak(_swigerr);
}


XS(_wrap_CheckFeatureIsAnnotationId) {
    char _swigmsg[SWIG_MAX_ERRMSG] = "";
    const char *_swigerr = _swigmsg;
    {
        std::string arg1 ;
        std::string arg2 ;
        std::string arg3 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: CheckFeatureIsAnnotationId(std::string,std::string,std::string);");
        }
        {
            if (!SvPOK((SV*) ST(0))) {
                SWIG_croak("Type error in argument 1 of CheckFeatureIsAnnotationId. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(0), len);
                (&arg1)->assign(ptr, len);
            }
        }
        {
            if (!SvPOK((SV*) ST(1))) {
                SWIG_croak("Type error in argument 2 of CheckFeatureIsAnnotationId. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(1), len);
                (&arg2)->assign(ptr, len);
            }
        }
        {
            if (!SvPOK((SV*) ST(2))) {
                SWIG_croak("Type error in argument 3 of CheckFeatureIsAnnotationId. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(2), len);
                (&arg3)->assign(ptr, len);
            }
        }
        {
            try {
                result = (bool)CheckFeatureIsAnnotationId(arg1,arg2,arg3);
                
            }
            catch (AGException& err) {
                string message = "AGException\x01";
                message += err.error();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::LoadError& err) {
                string message = "LoadError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::StoreError& err) {
                string message = "StoreError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        (void) _swigerr;
    }
    croak(_swigerr);
}


XS(_wrap_CheckLinear) {
    char _swigmsg[SWIG_MAX_ERRMSG] = "";
    const char *_swigerr = _swigmsg;
    {
        std::string arg1 ;
        std::string arg2 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CheckLinear(std::string,std::string);");
        }
        {
            if (!SvPOK((SV*) ST(0))) {
                SWIG_croak("Type error in argument 1 of CheckLinear. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(0), len);
                (&arg1)->assign(ptr, len);
            }
        }
        {
            if (!SvPOK((SV*) ST(1))) {
                SWIG_croak("Type error in argument 2 of CheckLinear. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(1), len);
                (&arg2)->assign(ptr, len);
            }
        }
        {
            try {
                result = (bool)CheckLinear(arg1,arg2);
                
            }
            catch (AGException& err) {
                string message = "AGException\x01";
                message += err.error();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::LoadError& err) {
                string message = "LoadError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::StoreError& err) {
                string message = "StoreError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        (void) _swigerr;
    }
    croak(_swigerr);
}


XS(_wrap_CheckConnected) {
    char _swigmsg[SWIG_MAX_ERRMSG] = "";
    const char *_swigerr = _swigmsg;
    {
        std::string arg1 ;
        std::string arg2 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CheckConnected(std::string,std::string);");
        }
        {
            if (!SvPOK((SV*) ST(0))) {
                SWIG_croak("Type error in argument 1 of CheckConnected. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(0), len);
                (&arg1)->assign(ptr, len);
            }
        }
        {
            if (!SvPOK((SV*) ST(1))) {
                SWIG_croak("Type error in argument 2 of CheckConnected. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(1), len);
                (&arg2)->assign(ptr, len);
            }
        }
        {
            try {
                result = (bool)CheckConnected(arg1,arg2);
                
            }
            catch (AGException& err) {
                string message = "AGException\x01";
                message += err.error();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::LoadError& err) {
                string message = "LoadError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::StoreError& err) {
                string message = "StoreError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        (void) _swigerr;
    }
    croak(_swigerr);
}


XS(_wrap_CheckCoextensive) {
    char _swigmsg[SWIG_MAX_ERRMSG] = "";
    const char *_swigerr = _swigmsg;
    {
        std::string arg1 ;
        std::string arg2 ;
        std::string arg3 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: CheckCoextensive(std::string,std::string,std::string);");
        }
        {
            if (!SvPOK((SV*) ST(0))) {
                SWIG_croak("Type error in argument 1 of CheckCoextensive. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(0), len);
                (&arg1)->assign(ptr, len);
            }
        }
        {
            if (!SvPOK((SV*) ST(1))) {
                SWIG_croak("Type error in argument 2 of CheckCoextensive. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(1), len);
                (&arg2)->assign(ptr, len);
            }
        }
        {
            if (!SvPOK((SV*) ST(2))) {
                SWIG_croak("Type error in argument 3 of CheckCoextensive. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(2), len);
                (&arg3)->assign(ptr, len);
            }
        }
        {
            try {
                result = (bool)CheckCoextensive(arg1,arg2,arg3);
                
            }
            catch (AGException& err) {
                string message = "AGException\x01";
                message += err.error();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::LoadError& err) {
                string message = "LoadError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::StoreError& err) {
                string message = "StoreError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        (void) _swigerr;
    }
    croak(_swigerr);
}


XS(_wrap_CheckSpan) {
    char _swigmsg[SWIG_MAX_ERRMSG] = "";
    const char *_swigerr = _swigmsg;
    {
        std::string arg1 ;
        std::string arg2 ;
        std::string arg3 ;
        bool result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: CheckSpan(std::string,std::string,std::string);");
        }
        {
            if (!SvPOK((SV*) ST(0))) {
                SWIG_croak("Type error in argument 1 of CheckSpan. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(0), len);
                (&arg1)->assign(ptr, len);
            }
        }
        {
            if (!SvPOK((SV*) ST(1))) {
                SWIG_croak("Type error in argument 2 of CheckSpan. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(1), len);
                (&arg2)->assign(ptr, len);
            }
        }
        {
            if (!SvPOK((SV*) ST(2))) {
                SWIG_croak("Type error in argument 3 of CheckSpan. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(2), len);
                (&arg3)->assign(ptr, len);
            }
        }
        {
            try {
                result = (bool)CheckSpan(arg1,arg2,arg3);
                
            }
            catch (AGException& err) {
                string message = "AGException\x01";
                message += err.error();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::LoadError& err) {
                string message = "LoadError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::StoreError& err) {
                string message = "StoreError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        (void) _swigerr;
    }
    croak(_swigerr);
}


XS(_wrap_tree_init_tree__SWIG_0) {
    char _swigmsg[SWIG_MAX_ERRMSG] = "";
    const char *_swigerr = _swigmsg;
    {
        std::string *arg1 = 0 ;
        std::string *arg2 = 0 ;
        std::string result;
        std::string temp1 ;
        std::string temp2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: tree_init_tree(std::string const &,std::string const &);");
        }
        {
            if (!SvPOK((SV*) ST(0))) {
                SWIG_croak("Type error in argument 1 of tree_init_tree. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(0), len);
                temp1.assign(ptr, len);
                arg1 = &temp1;
            }
        }
        {
            if (!SvPOK((SV*) ST(1))) {
                SWIG_croak("Type error in argument 2 of tree_init_tree. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(1), len);
                temp2.assign(ptr, len);
                arg2 = &temp2;
            }
        }
        {
            try {
                result = tree_init_tree((std::string const &)*arg1,(std::string const &)*arg2);
                
            }
            catch (AGException& err) {
                string message = "AGException\x01";
                message += err.error();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::LoadError& err) {
                string message = "LoadError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::StoreError& err) {
                string message = "StoreError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
        }
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        (void) _swigerr;
    }
    croak(_swigerr);
}


XS(_wrap_tree_init_tree__SWIG_1) {
    char _swigmsg[SWIG_MAX_ERRMSG] = "";
    const char *_swigerr = _swigmsg;
    {
        std::string *arg1 = 0 ;
        std::string result;
        std::string temp1 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: tree_init_tree(std::string const &);");
        }
        {
            if (!SvPOK((SV*) ST(0))) {
                SWIG_croak("Type error in argument 1 of tree_init_tree. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(0), len);
                temp1.assign(ptr, len);
                arg1 = &temp1;
            }
        }
        {
            try {
                result = tree_init_tree((std::string const &)*arg1);
                
            }
            catch (AGException& err) {
                string message = "AGException\x01";
                message += err.error();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::LoadError& err) {
                string message = "LoadError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::StoreError& err) {
                string message = "StoreError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
        }
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        (void) _swigerr;
    }
    croak(_swigerr);
}


XS(_wrap_tree_init_tree) {
    dXSARGS;
    
    if (items == 1) {
            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_tree_init_tree__SWIG_1); return;
    }
    if (items == 2) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_tree_init_tree__SWIG_0); return;
    }
    
    croak("No matching function for overloaded 'tree_init_tree'");
    XSRETURN(0);
}


XS(_wrap_tree_move_down__SWIG_0) {
    char _swigmsg[SWIG_MAX_ERRMSG] = "";
    const char *_swigerr = _swigmsg;
    {
        std::string *arg1 = 0 ;
        std::string *arg2 = 0 ;
        std::string arg3 ;
        bool result;
        std::string temp1 ;
        std::string temp2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: tree_move_down(std::string const &,std::string const &,new_anno);");
        }
        {
            if (!SvPOK((SV*) ST(0))) {
                SWIG_croak("Type error in argument 1 of tree_move_down. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(0), len);
                temp1.assign(ptr, len);
                arg1 = &temp1;
            }
        }
        {
            if (!SvPOK((SV*) ST(1))) {
                SWIG_croak("Type error in argument 2 of tree_move_down. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(1), len);
                temp2.assign(ptr, len);
                arg2 = &temp2;
            }
        }
        {
            if (!SvPOK((SV*) ST(2))) {
                SWIG_croak("Type error in argument 3 of tree_move_down. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(2), len);
                (&arg3)->assign(ptr, len);
            }
        }
        {
            try {
                result = (bool)tree_move_down((std::string const &)*arg1,(std::string const &)*arg2,arg3);
                
            }
            catch (AGException& err) {
                string message = "AGException\x01";
                message += err.error();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::LoadError& err) {
                string message = "LoadError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::StoreError& err) {
                string message = "StoreError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        (void) _swigerr;
    }
    croak(_swigerr);
}


XS(_wrap_tree_move_down__SWIG_1) {
    char _swigmsg[SWIG_MAX_ERRMSG] = "";
    const char *_swigerr = _swigmsg;
    {
        std::string *arg1 = 0 ;
        std::string *arg2 = 0 ;
        bool result;
        std::string temp1 ;
        std::string temp2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: tree_move_down(std::string const &,std::string const &);");
        }
        {
            if (!SvPOK((SV*) ST(0))) {
                SWIG_croak("Type error in argument 1 of tree_move_down. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(0), len);
                temp1.assign(ptr, len);
                arg1 = &temp1;
            }
        }
        {
            if (!SvPOK((SV*) ST(1))) {
                SWIG_croak("Type error in argument 2 of tree_move_down. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(1), len);
                temp2.assign(ptr, len);
                arg2 = &temp2;
            }
        }
        {
            try {
                result = (bool)tree_move_down((std::string const &)*arg1,(std::string const &)*arg2);
                
            }
            catch (AGException& err) {
                string message = "AGException\x01";
                message += err.error();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::LoadError& err) {
                string message = "LoadError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::StoreError& err) {
                string message = "StoreError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        (void) _swigerr;
    }
    croak(_swigerr);
}


XS(_wrap_tree_move_down__SWIG_2) {
    char _swigmsg[SWIG_MAX_ERRMSG] = "";
    const char *_swigerr = _swigmsg;
    {
        std::string *arg1 = 0 ;
        bool result;
        std::string temp1 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: tree_move_down(std::string const &);");
        }
        {
            if (!SvPOK((SV*) ST(0))) {
                SWIG_croak("Type error in argument 1 of tree_move_down. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(0), len);
                temp1.assign(ptr, len);
                arg1 = &temp1;
            }
        }
        {
            try {
                result = (bool)tree_move_down((std::string const &)*arg1);
                
            }
            catch (AGException& err) {
                string message = "AGException\x01";
                message += err.error();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::LoadError& err) {
                string message = "LoadError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::StoreError& err) {
                string message = "StoreError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        (void) _swigerr;
    }
    croak(_swigerr);
}


XS(_wrap_tree_move_down) {
    dXSARGS;
    
    if (items == 1) {
            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_tree_move_down__SWIG_2); return;
    }
    if (items == 2) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_tree_move_down__SWIG_1); return;
    }
    if (items == 3) {
                    (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_tree_move_down__SWIG_0); return;
    }
    
    croak("No matching function for overloaded 'tree_move_down'");
    XSRETURN(0);
}


XS(_wrap_tree_move_up) {
    char _swigmsg[SWIG_MAX_ERRMSG] = "";
    const char *_swigerr = _swigmsg;
    {
        std::string *arg1 = 0 ;
        bool result;
        std::string temp1 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: tree_move_up(std::string const &);");
        }
        {
            if (!SvPOK((SV*) ST(0))) {
                SWIG_croak("Type error in argument 1 of tree_move_up. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(0), len);
                temp1.assign(ptr, len);
                arg1 = &temp1;
            }
        }
        {
            try {
                result = (bool)tree_move_up((std::string const &)*arg1);
                
            }
            catch (AGException& err) {
                string message = "AGException\x01";
                message += err.error();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::LoadError& err) {
                string message = "LoadError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::StoreError& err) {
                string message = "StoreError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        (void) _swigerr;
    }
    croak(_swigerr);
}


XS(_wrap_tree_promote_right) {
    char _swigmsg[SWIG_MAX_ERRMSG] = "";
    const char *_swigerr = _swigmsg;
    {
        std::string *arg1 = 0 ;
        bool result;
        std::string temp1 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: tree_promote_right(std::string const &);");
        }
        {
            if (!SvPOK((SV*) ST(0))) {
                SWIG_croak("Type error in argument 1 of tree_promote_right. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(0), len);
                temp1.assign(ptr, len);
                arg1 = &temp1;
            }
        }
        {
            try {
                result = (bool)tree_promote_right((std::string const &)*arg1);
                
            }
            catch (AGException& err) {
                string message = "AGException\x01";
                message += err.error();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::LoadError& err) {
                string message = "LoadError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::StoreError& err) {
                string message = "StoreError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        (void) _swigerr;
    }
    croak(_swigerr);
}


XS(_wrap_tree_promote_left) {
    char _swigmsg[SWIG_MAX_ERRMSG] = "";
    const char *_swigerr = _swigmsg;
    {
        std::string *arg1 = 0 ;
        bool result;
        std::string temp1 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: tree_promote_left(std::string const &);");
        }
        {
            if (!SvPOK((SV*) ST(0))) {
                SWIG_croak("Type error in argument 1 of tree_promote_left. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(0), len);
                temp1.assign(ptr, len);
                arg1 = &temp1;
            }
        }
        {
            try {
                result = (bool)tree_promote_left((std::string const &)*arg1);
                
            }
            catch (AGException& err) {
                string message = "AGException\x01";
                message += err.error();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::LoadError& err) {
                string message = "LoadError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::StoreError& err) {
                string message = "StoreError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        (void) _swigerr;
    }
    croak(_swigerr);
}


XS(_wrap_tree_demote_right) {
    char _swigmsg[SWIG_MAX_ERRMSG] = "";
    const char *_swigerr = _swigmsg;
    {
        std::string *arg1 = 0 ;
        bool result;
        std::string temp1 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: tree_demote_right(std::string const &);");
        }
        {
            if (!SvPOK((SV*) ST(0))) {
                SWIG_croak("Type error in argument 1 of tree_demote_right. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(0), len);
                temp1.assign(ptr, len);
                arg1 = &temp1;
            }
        }
        {
            try {
                result = (bool)tree_demote_right((std::string const &)*arg1);
                
            }
            catch (AGException& err) {
                string message = "AGException\x01";
                message += err.error();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::LoadError& err) {
                string message = "LoadError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::StoreError& err) {
                string message = "StoreError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        (void) _swigerr;
    }
    croak(_swigerr);
}


XS(_wrap_tree_demote_left) {
    char _swigmsg[SWIG_MAX_ERRMSG] = "";
    const char *_swigerr = _swigmsg;
    {
        std::string *arg1 = 0 ;
        bool result;
        std::string temp1 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: tree_demote_left(std::string const &);");
        }
        {
            if (!SvPOK((SV*) ST(0))) {
                SWIG_croak("Type error in argument 1 of tree_demote_left. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(0), len);
                temp1.assign(ptr, len);
                arg1 = &temp1;
            }
        }
        {
            try {
                result = (bool)tree_demote_left((std::string const &)*arg1);
                
            }
            catch (AGException& err) {
                string message = "AGException\x01";
                message += err.error();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::LoadError& err) {
                string message = "LoadError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::StoreError& err) {
                string message = "StoreError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        (void) _swigerr;
    }
    croak(_swigerr);
}


XS(_wrap_tree_first_tree) {
    char _swigmsg[SWIG_MAX_ERRMSG] = "";
    const char *_swigerr = _swigmsg;
    {
        std::string *arg1 = 0 ;
        std::string result;
        std::string temp1 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: tree_first_tree(std::string const &);");
        }
        {
            if (!SvPOK((SV*) ST(0))) {
                SWIG_croak("Type error in argument 1 of tree_first_tree. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(0), len);
                temp1.assign(ptr, len);
                arg1 = &temp1;
            }
        }
        {
            try {
                result = tree_first_tree((std::string const &)*arg1);
                
            }
            catch (AGException& err) {
                string message = "AGException\x01";
                message += err.error();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::LoadError& err) {
                string message = "LoadError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::StoreError& err) {
                string message = "StoreError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
        }
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        (void) _swigerr;
    }
    croak(_swigerr);
}


XS(_wrap_tree_last_tree) {
    char _swigmsg[SWIG_MAX_ERRMSG] = "";
    const char *_swigerr = _swigmsg;
    {
        std::string *arg1 = 0 ;
        std::string result;
        std::string temp1 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: tree_last_tree(std::string const &);");
        }
        {
            if (!SvPOK((SV*) ST(0))) {
                SWIG_croak("Type error in argument 1 of tree_last_tree. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(0), len);
                temp1.assign(ptr, len);
                arg1 = &temp1;
            }
        }
        {
            try {
                result = tree_last_tree((std::string const &)*arg1);
                
            }
            catch (AGException& err) {
                string message = "AGException\x01";
                message += err.error();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::LoadError& err) {
                string message = "LoadError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::StoreError& err) {
                string message = "StoreError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
        }
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        (void) _swigerr;
    }
    croak(_swigerr);
}


XS(_wrap_tree_move) {
    char _swigmsg[SWIG_MAX_ERRMSG] = "";
    const char *_swigerr = _swigmsg;
    {
        std::string *arg1 = 0 ;
        std::string *arg2 = 0 ;
        bool result;
        std::string temp1 ;
        std::string temp2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: tree_move(std::string const &,std::string const &);");
        }
        {
            if (!SvPOK((SV*) ST(0))) {
                SWIG_croak("Type error in argument 1 of tree_move. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(0), len);
                temp1.assign(ptr, len);
                arg1 = &temp1;
            }
        }
        {
            if (!SvPOK((SV*) ST(1))) {
                SWIG_croak("Type error in argument 2 of tree_move. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(1), len);
                temp2.assign(ptr, len);
                arg2 = &temp2;
            }
        }
        {
            try {
                result = (bool)tree_move((std::string const &)*arg1,(std::string const &)*arg2);
                
            }
            catch (AGException& err) {
                string message = "AGException\x01";
                message += err.error();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::LoadError& err) {
                string message = "LoadError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::StoreError& err) {
                string message = "StoreError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        (void) _swigerr;
    }
    croak(_swigerr);
}


XS(_wrap_tree_insert_node_left__SWIG_0) {
    char _swigmsg[SWIG_MAX_ERRMSG] = "";
    const char *_swigerr = _swigmsg;
    {
        std::string *arg1 = 0 ;
        std::string *arg2 = 0 ;
        std::string arg3 ;
        std::string result;
        std::string temp1 ;
        std::string temp2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: tree_insert_node_left(std::string const &,std::string const &,std::string);");
        }
        {
            if (!SvPOK((SV*) ST(0))) {
                SWIG_croak("Type error in argument 1 of tree_insert_node_left. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(0), len);
                temp1.assign(ptr, len);
                arg1 = &temp1;
            }
        }
        {
            if (!SvPOK((SV*) ST(1))) {
                SWIG_croak("Type error in argument 2 of tree_insert_node_left. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(1), len);
                temp2.assign(ptr, len);
                arg2 = &temp2;
            }
        }
        {
            if (!SvPOK((SV*) ST(2))) {
                SWIG_croak("Type error in argument 3 of tree_insert_node_left. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(2), len);
                (&arg3)->assign(ptr, len);
            }
        }
        {
            try {
                result = tree_insert_node_left((std::string const &)*arg1,(std::string const &)*arg2,arg3);
                
            }
            catch (AGException& err) {
                string message = "AGException\x01";
                message += err.error();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::LoadError& err) {
                string message = "LoadError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::StoreError& err) {
                string message = "StoreError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
        }
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        (void) _swigerr;
    }
    croak(_swigerr);
}


XS(_wrap_tree_insert_node_left__SWIG_1) {
    char _swigmsg[SWIG_MAX_ERRMSG] = "";
    const char *_swigerr = _swigmsg;
    {
        std::string *arg1 = 0 ;
        std::string *arg2 = 0 ;
        std::string result;
        std::string temp1 ;
        std::string temp2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: tree_insert_node_left(std::string const &,std::string const &);");
        }
        {
            if (!SvPOK((SV*) ST(0))) {
                SWIG_croak("Type error in argument 1 of tree_insert_node_left. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(0), len);
                temp1.assign(ptr, len);
                arg1 = &temp1;
            }
        }
        {
            if (!SvPOK((SV*) ST(1))) {
                SWIG_croak("Type error in argument 2 of tree_insert_node_left. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(1), len);
                temp2.assign(ptr, len);
                arg2 = &temp2;
            }
        }
        {
            try {
                result = tree_insert_node_left((std::string const &)*arg1,(std::string const &)*arg2);
                
            }
            catch (AGException& err) {
                string message = "AGException\x01";
                message += err.error();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::LoadError& err) {
                string message = "LoadError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::StoreError& err) {
                string message = "StoreError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
        }
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        (void) _swigerr;
    }
    croak(_swigerr);
}


XS(_wrap_tree_insert_node_left__SWIG_2) {
    char _swigmsg[SWIG_MAX_ERRMSG] = "";
    const char *_swigerr = _swigmsg;
    {
        std::string *arg1 = 0 ;
        std::string result;
        std::string temp1 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: tree_insert_node_left(std::string const &);");
        }
        {
            if (!SvPOK((SV*) ST(0))) {
                SWIG_croak("Type error in argument 1 of tree_insert_node_left. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(0), len);
                temp1.assign(ptr, len);
                arg1 = &temp1;
            }
        }
        {
            try {
                result = tree_insert_node_left((std::string const &)*arg1);
                
            }
            catch (AGException& err) {
                string message = "AGException\x01";
                message += err.error();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::LoadError& err) {
                string message = "LoadError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::StoreError& err) {
                string message = "StoreError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
        }
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        (void) _swigerr;
    }
    croak(_swigerr);
}


XS(_wrap_tree_insert_node_left) {
    dXSARGS;
    
    if (items == 1) {
            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_tree_insert_node_left__SWIG_2); return;
    }
    if (items == 2) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_tree_insert_node_left__SWIG_1); return;
    }
    if (items == 3) {
                    (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_tree_insert_node_left__SWIG_0); return;
    }
    
    croak("No matching function for overloaded 'tree_insert_node_left'");
    XSRETURN(0);
}


XS(_wrap_tree_insert_node_right__SWIG_0) {
    char _swigmsg[SWIG_MAX_ERRMSG] = "";
    const char *_swigerr = _swigmsg;
    {
        std::string *arg1 = 0 ;
        std::string *arg2 = 0 ;
        std::string arg3 ;
        std::string result;
        std::string temp1 ;
        std::string temp2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: tree_insert_node_right(std::string const &,std::string const &,std::string);");
        }
        {
            if (!SvPOK((SV*) ST(0))) {
                SWIG_croak("Type error in argument 1 of tree_insert_node_right. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(0), len);
                temp1.assign(ptr, len);
                arg1 = &temp1;
            }
        }
        {
            if (!SvPOK((SV*) ST(1))) {
                SWIG_croak("Type error in argument 2 of tree_insert_node_right. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(1), len);
                temp2.assign(ptr, len);
                arg2 = &temp2;
            }
        }
        {
            if (!SvPOK((SV*) ST(2))) {
                SWIG_croak("Type error in argument 3 of tree_insert_node_right. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(2), len);
                (&arg3)->assign(ptr, len);
            }
        }
        {
            try {
                result = tree_insert_node_right((std::string const &)*arg1,(std::string const &)*arg2,arg3);
                
            }
            catch (AGException& err) {
                string message = "AGException\x01";
                message += err.error();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::LoadError& err) {
                string message = "LoadError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::StoreError& err) {
                string message = "StoreError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
        }
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        (void) _swigerr;
    }
    croak(_swigerr);
}


XS(_wrap_tree_insert_node_right__SWIG_1) {
    char _swigmsg[SWIG_MAX_ERRMSG] = "";
    const char *_swigerr = _swigmsg;
    {
        std::string *arg1 = 0 ;
        std::string *arg2 = 0 ;
        std::string result;
        std::string temp1 ;
        std::string temp2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: tree_insert_node_right(std::string const &,std::string const &);");
        }
        {
            if (!SvPOK((SV*) ST(0))) {
                SWIG_croak("Type error in argument 1 of tree_insert_node_right. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(0), len);
                temp1.assign(ptr, len);
                arg1 = &temp1;
            }
        }
        {
            if (!SvPOK((SV*) ST(1))) {
                SWIG_croak("Type error in argument 2 of tree_insert_node_right. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(1), len);
                temp2.assign(ptr, len);
                arg2 = &temp2;
            }
        }
        {
            try {
                result = tree_insert_node_right((std::string const &)*arg1,(std::string const &)*arg2);
                
            }
            catch (AGException& err) {
                string message = "AGException\x01";
                message += err.error();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::LoadError& err) {
                string message = "LoadError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::StoreError& err) {
                string message = "StoreError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
        }
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        (void) _swigerr;
    }
    croak(_swigerr);
}


XS(_wrap_tree_insert_node_right__SWIG_2) {
    char _swigmsg[SWIG_MAX_ERRMSG] = "";
    const char *_swigerr = _swigmsg;
    {
        std::string *arg1 = 0 ;
        std::string result;
        std::string temp1 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: tree_insert_node_right(std::string const &);");
        }
        {
            if (!SvPOK((SV*) ST(0))) {
                SWIG_croak("Type error in argument 1 of tree_insert_node_right. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(0), len);
                temp1.assign(ptr, len);
                arg1 = &temp1;
            }
        }
        {
            try {
                result = tree_insert_node_right((std::string const &)*arg1);
                
            }
            catch (AGException& err) {
                string message = "AGException\x01";
                message += err.error();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::LoadError& err) {
                string message = "LoadError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::StoreError& err) {
                string message = "StoreError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
        }
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        (void) _swigerr;
    }
    croak(_swigerr);
}


XS(_wrap_tree_insert_node_right) {
    dXSARGS;
    
    if (items == 1) {
            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_tree_insert_node_right__SWIG_2); return;
    }
    if (items == 2) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_tree_insert_node_right__SWIG_1); return;
    }
    if (items == 3) {
                    (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_tree_insert_node_right__SWIG_0); return;
    }
    
    croak("No matching function for overloaded 'tree_insert_node_right'");
    XSRETURN(0);
}


XS(_wrap_tree_delete_node_left) {
    char _swigmsg[SWIG_MAX_ERRMSG] = "";
    const char *_swigerr = _swigmsg;
    {
        std::string *arg1 = 0 ;
        bool result;
        std::string temp1 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: tree_delete_node_left(std::string const &);");
        }
        {
            if (!SvPOK((SV*) ST(0))) {
                SWIG_croak("Type error in argument 1 of tree_delete_node_left. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(0), len);
                temp1.assign(ptr, len);
                arg1 = &temp1;
            }
        }
        {
            try {
                result = (bool)tree_delete_node_left((std::string const &)*arg1);
                
            }
            catch (AGException& err) {
                string message = "AGException\x01";
                message += err.error();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::LoadError& err) {
                string message = "LoadError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::StoreError& err) {
                string message = "StoreError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        (void) _swigerr;
    }
    croak(_swigerr);
}


XS(_wrap_tree_delete_node_right) {
    char _swigmsg[SWIG_MAX_ERRMSG] = "";
    const char *_swigerr = _swigmsg;
    {
        std::string *arg1 = 0 ;
        bool result;
        std::string temp1 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: tree_delete_node_right(std::string const &);");
        }
        {
            if (!SvPOK((SV*) ST(0))) {
                SWIG_croak("Type error in argument 1 of tree_delete_node_right. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(0), len);
                temp1.assign(ptr, len);
                arg1 = &temp1;
            }
        }
        {
            try {
                result = (bool)tree_delete_node_right((std::string const &)*arg1);
                
            }
            catch (AGException& err) {
                string message = "AGException\x01";
                message += err.error();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::LoadError& err) {
                string message = "LoadError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::StoreError& err) {
                string message = "StoreError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        (void) _swigerr;
    }
    croak(_swigerr);
}


XS(_wrap_tree_root__SWIG_0) {
    char _swigmsg[SWIG_MAX_ERRMSG] = "";
    const char *_swigerr = _swigmsg;
    {
        std::string arg1 ;
        int arg2 ;
        std::string result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: tree_root(std::string,int);");
        }
        {
            if (!SvPOK((SV*) ST(0))) {
                SWIG_croak("Type error in argument 1 of tree_root. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(0), len);
                (&arg1)->assign(ptr, len);
            }
        }
        arg2 = (int) SvIV(ST(1));
        {
            try {
                result = tree_root(arg1,arg2);
                
            }
            catch (AGException& err) {
                string message = "AGException\x01";
                message += err.error();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::LoadError& err) {
                string message = "LoadError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::StoreError& err) {
                string message = "StoreError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
        }
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        (void) _swigerr;
    }
    croak(_swigerr);
}


XS(_wrap_tree_root__SWIG_1) {
    char _swigmsg[SWIG_MAX_ERRMSG] = "";
    const char *_swigerr = _swigmsg;
    {
        std::string arg1 ;
        std::string result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: tree_root(std::string);");
        }
        {
            if (!SvPOK((SV*) ST(0))) {
                SWIG_croak("Type error in argument 1 of tree_root. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(0), len);
                (&arg1)->assign(ptr, len);
            }
        }
        {
            try {
                result = tree_root(arg1);
                
            }
            catch (AGException& err) {
                string message = "AGException\x01";
                message += err.error();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::LoadError& err) {
                string message = "LoadError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::StoreError& err) {
                string message = "StoreError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
        }
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        (void) _swigerr;
    }
    croak(_swigerr);
}


XS(_wrap_tree_root) {
    dXSARGS;
    
    if (items == 1) {
            (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_tree_root__SWIG_1); return;
    }
    if (items == 2) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_tree_root__SWIG_0); return;
    }
    
    croak("No matching function for overloaded 'tree_root'");
    XSRETURN(0);
}


XS(_wrap_tree_parent) {
    char _swigmsg[SWIG_MAX_ERRMSG] = "";
    const char *_swigerr = _swigmsg;
    {
        std::string *arg1 = 0 ;
        std::string result;
        std::string temp1 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: tree_parent(std::string const &);");
        }
        {
            if (!SvPOK((SV*) ST(0))) {
                SWIG_croak("Type error in argument 1 of tree_parent. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(0), len);
                temp1.assign(ptr, len);
                arg1 = &temp1;
            }
        }
        {
            try {
                result = tree_parent((std::string const &)*arg1);
                
            }
            catch (AGException& err) {
                string message = "AGException\x01";
                message += err.error();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::LoadError& err) {
                string message = "LoadError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::StoreError& err) {
                string message = "StoreError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
        }
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        (void) _swigerr;
    }
    croak(_swigerr);
}


XS(_wrap_tree_children) {
    char _swigmsg[SWIG_MAX_ERRMSG] = "";
    const char *_swigerr = _swigmsg;
    {
        std::string *arg1 = 0 ;
        list<std::string > result;
        std::string temp1 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: tree_children(std::string const &);");
        }
        {
            if (!SvPOK((SV*) ST(0))) {
                SWIG_croak("Type error in argument 1 of tree_children. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(0), len);
                temp1.assign(ptr, len);
                arg1 = &temp1;
            }
        }
        {
            try {
                result = tree_children((std::string const &)*arg1);
                
            }
            catch (AGException& err) {
                string message = "AGException\x01";
                message += err.error();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::LoadError& err) {
                string message = "LoadError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::StoreError& err) {
                string message = "StoreError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
        }
        {
            AV* arr = newAV();
            list_to_array(result, arr);
            ST(argvi) = newRV_noinc((SV*)arr);
            sv_2mortal(ST(argvi));    // don't know why
            argvi++;    // seems to signal the existence of a return value
        }
        XSRETURN(argvi);
        fail:
        (void) _swigerr;
    }
    croak(_swigerr);
}


XS(_wrap_tree_left) {
    char _swigmsg[SWIG_MAX_ERRMSG] = "";
    const char *_swigerr = _swigmsg;
    {
        std::string *arg1 = 0 ;
        std::string result;
        std::string temp1 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: tree_left(std::string const &);");
        }
        {
            if (!SvPOK((SV*) ST(0))) {
                SWIG_croak("Type error in argument 1 of tree_left. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(0), len);
                temp1.assign(ptr, len);
                arg1 = &temp1;
            }
        }
        {
            try {
                result = tree_left((std::string const &)*arg1);
                
            }
            catch (AGException& err) {
                string message = "AGException\x01";
                message += err.error();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::LoadError& err) {
                string message = "LoadError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::StoreError& err) {
                string message = "StoreError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
        }
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        (void) _swigerr;
    }
    croak(_swigerr);
}


XS(_wrap_tree_right) {
    char _swigmsg[SWIG_MAX_ERRMSG] = "";
    const char *_swigerr = _swigmsg;
    {
        std::string *arg1 = 0 ;
        std::string result;
        std::string temp1 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: tree_right(std::string const &);");
        }
        {
            if (!SvPOK((SV*) ST(0))) {
                SWIG_croak("Type error in argument 1 of tree_right. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(0), len);
                temp1.assign(ptr, len);
                arg1 = &temp1;
            }
        }
        {
            try {
                result = tree_right((std::string const &)*arg1);
                
            }
            catch (AGException& err) {
                string message = "AGException\x01";
                message += err.error();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::LoadError& err) {
                string message = "LoadError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::StoreError& err) {
                string message = "StoreError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
        }
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        (void) _swigerr;
    }
    croak(_swigerr);
}


XS(_wrap_tree_path) {
    char _swigmsg[SWIG_MAX_ERRMSG] = "";
    const char *_swigerr = _swigmsg;
    {
        std::string arg1 ;
        list<std::string > result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: tree_path(std::string);");
        }
        {
            if (!SvPOK((SV*) ST(0))) {
                SWIG_croak("Type error in argument 1 of tree_path. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(0), len);
                (&arg1)->assign(ptr, len);
            }
        }
        {
            try {
                result = tree_path(arg1);
                
            }
            catch (AGException& err) {
                string message = "AGException\x01";
                message += err.error();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::LoadError& err) {
                string message = "LoadError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::StoreError& err) {
                string message = "StoreError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
        }
        {
            AV* arr = newAV();
            list_to_array(result, arr);
            ST(argvi) = newRV_noinc((SV*)arr);
            sv_2mortal(ST(argvi));    // don't know why
            argvi++;    // seems to signal the existence of a return value
        }
        XSRETURN(argvi);
        fail:
        (void) _swigerr;
    }
    croak(_swigerr);
}


XS(_wrap_tree_common_ancestor) {
    char _swigmsg[SWIG_MAX_ERRMSG] = "";
    const char *_swigerr = _swigmsg;
    {
        std::string *arg1 = 0 ;
        std::string *arg2 = 0 ;
        std::string result;
        std::string temp1 ;
        std::string temp2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: tree_common_ancestor(std::string const &,std::string const &);");
        }
        {
            if (!SvPOK((SV*) ST(0))) {
                SWIG_croak("Type error in argument 1 of tree_common_ancestor. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(0), len);
                temp1.assign(ptr, len);
                arg1 = &temp1;
            }
        }
        {
            if (!SvPOK((SV*) ST(1))) {
                SWIG_croak("Type error in argument 2 of tree_common_ancestor. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(1), len);
                temp2.assign(ptr, len);
                arg2 = &temp2;
            }
        }
        {
            try {
                result = tree_common_ancestor((std::string const &)*arg1,(std::string const &)*arg2);
                
            }
            catch (AGException& err) {
                string message = "AGException\x01";
                message += err.error();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::LoadError& err) {
                string message = "LoadError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::StoreError& err) {
                string message = "StoreError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
        }
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        (void) _swigerr;
    }
    croak(_swigerr);
}


XS(_wrap_tree_insert_node__SWIG_0) {
    char _swigmsg[SWIG_MAX_ERRMSG] = "";
    const char *_swigerr = _swigmsg;
    {
        std::string *arg1 = 0 ;
        std::string *arg2 = 0 ;
        std::string *arg3 = 0 ;
        std::string *arg4 = 0 ;
        std::string result;
        std::string temp1 ;
        std::string temp2 ;
        std::string temp3 ;
        std::string temp4 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 4) || (items > 4)) {
            SWIG_croak("Usage: tree_insert_node(std::string const &,std::string const &,std::string const &,std::string const &);");
        }
        {
            if (!SvPOK((SV*) ST(0))) {
                SWIG_croak("Type error in argument 1 of tree_insert_node. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(0), len);
                temp1.assign(ptr, len);
                arg1 = &temp1;
            }
        }
        {
            if (!SvPOK((SV*) ST(1))) {
                SWIG_croak("Type error in argument 2 of tree_insert_node. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(1), len);
                temp2.assign(ptr, len);
                arg2 = &temp2;
            }
        }
        {
            if (!SvPOK((SV*) ST(2))) {
                SWIG_croak("Type error in argument 3 of tree_insert_node. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(2), len);
                temp3.assign(ptr, len);
                arg3 = &temp3;
            }
        }
        {
            if (!SvPOK((SV*) ST(3))) {
                SWIG_croak("Type error in argument 4 of tree_insert_node. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(3), len);
                temp4.assign(ptr, len);
                arg4 = &temp4;
            }
        }
        {
            try {
                result = tree_insert_node((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
                
            }
            catch (AGException& err) {
                string message = "AGException\x01";
                message += err.error();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::LoadError& err) {
                string message = "LoadError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::StoreError& err) {
                string message = "StoreError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
        }
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        (void) _swigerr;
    }
    croak(_swigerr);
}


XS(_wrap_tree_insert_node__SWIG_1) {
    char _swigmsg[SWIG_MAX_ERRMSG] = "";
    const char *_swigerr = _swigmsg;
    {
        std::string *arg1 = 0 ;
        std::string *arg2 = 0 ;
        std::string *arg3 = 0 ;
        std::string result;
        std::string temp1 ;
        std::string temp2 ;
        std::string temp3 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: tree_insert_node(std::string const &,std::string const &,std::string const &);");
        }
        {
            if (!SvPOK((SV*) ST(0))) {
                SWIG_croak("Type error in argument 1 of tree_insert_node. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(0), len);
                temp1.assign(ptr, len);
                arg1 = &temp1;
            }
        }
        {
            if (!SvPOK((SV*) ST(1))) {
                SWIG_croak("Type error in argument 2 of tree_insert_node. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(1), len);
                temp2.assign(ptr, len);
                arg2 = &temp2;
            }
        }
        {
            if (!SvPOK((SV*) ST(2))) {
                SWIG_croak("Type error in argument 3 of tree_insert_node. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(2), len);
                temp3.assign(ptr, len);
                arg3 = &temp3;
            }
        }
        {
            try {
                result = tree_insert_node((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
                
            }
            catch (AGException& err) {
                string message = "AGException\x01";
                message += err.error();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::LoadError& err) {
                string message = "LoadError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::StoreError& err) {
                string message = "StoreError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
        }
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        (void) _swigerr;
    }
    croak(_swigerr);
}


XS(_wrap_tree_insert_node__SWIG_2) {
    char _swigmsg[SWIG_MAX_ERRMSG] = "";
    const char *_swigerr = _swigmsg;
    {
        std::string *arg1 = 0 ;
        std::string *arg2 = 0 ;
        std::string result;
        std::string temp1 ;
        std::string temp2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: tree_insert_node(std::string const &,std::string const &);");
        }
        {
            if (!SvPOK((SV*) ST(0))) {
                SWIG_croak("Type error in argument 1 of tree_insert_node. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(0), len);
                temp1.assign(ptr, len);
                arg1 = &temp1;
            }
        }
        {
            if (!SvPOK((SV*) ST(1))) {
                SWIG_croak("Type error in argument 2 of tree_insert_node. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(1), len);
                temp2.assign(ptr, len);
                arg2 = &temp2;
            }
        }
        {
            try {
                result = tree_insert_node((std::string const &)*arg1,(std::string const &)*arg2);
                
            }
            catch (AGException& err) {
                string message = "AGException\x01";
                message += err.error();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::LoadError& err) {
                string message = "LoadError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::StoreError& err) {
                string message = "StoreError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
        }
        {
            if (argvi >= items) EXTEND(sp, 1);	// bump stack ptr, if needed
            char *data = const_cast<char*>((&result)->data());
            sv_setpvn(ST(argvi) = sv_newmortal(), data, (&result)->size());
            ++argvi;
        }
        XSRETURN(argvi);
        fail:
        (void) _swigerr;
    }
    croak(_swigerr);
}


XS(_wrap_tree_insert_node) {
    dXSARGS;
    
    if (items == 2) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_tree_insert_node__SWIG_2); return;
    }
    if (items == 3) {
                    (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_tree_insert_node__SWIG_1); return;
    }
    if (items == 4) {
                        (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_tree_insert_node__SWIG_0); return;
    }
    
    croak("No matching function for overloaded 'tree_insert_node'");
    XSRETURN(0);
}


XS(_wrap_tree_delete_node) {
    char _swigmsg[SWIG_MAX_ERRMSG] = "";
    const char *_swigerr = _swigmsg;
    {
        std::string *arg1 = 0 ;
        bool result;
        std::string temp1 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: tree_delete_node(std::string const &);");
        }
        {
            if (!SvPOK((SV*) ST(0))) {
                SWIG_croak("Type error in argument 1 of tree_delete_node. "
                "Expected a string");
            }else {
                STRLEN len;
                const char *ptr = SvPV(ST(0), len);
                temp1.assign(ptr, len);
                arg1 = &temp1;
            }
        }
        {
            try {
                result = (bool)tree_delete_node((std::string const &)*arg1);
                
            }
            catch (AGException& err) {
                string message = "AGException\x01";
                message += err.error();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::LoadError& err) {
                string message = "LoadError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
            catch (const agfio::StoreError& err) {
                string message = "StoreError\x01";
                message += err.what();
                SWIG_exception(SWIG_RuntimeError, (char*) message.c_str());
            }
        }
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        (void) _swigerr;
    }
    croak(_swigerr);
}



/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static swig_type_info _swigt__p_mapTstd__string_std__string_t[] = {{"_p_mapTstd__string_std__string_t", 0, "map<std::string,std::string > *", 0},{"_p_mapTstd__string_std__string_t"},{0}};
static swig_type_info _swigt__p_setTstd__string_t[] = {{"_p_setTstd__string_t", 0, "set<std::string > *", 0},{"_p_setTstd__string_t"},{0}};
static swig_type_info _swigt__p_listTstd__string_t[] = {{"_p_listTstd__string_t", 0, "list<std::string > *", 0},{"_p_listTstd__string_t"},{0}};

static swig_type_info *swig_types_initial[] = {
_swigt__p_mapTstd__string_std__string_t, 
_swigt__p_setTstd__string_t, 
_swigt__p_listTstd__string_t, 
0
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_constant_info swig_constants[] = {
{0}
};
#ifdef __cplusplus
}
#endif
static swig_variable_info swig_variables[] = {
{0}
};
static swig_command_info swig_commands[] = {
{"ag::CreateAGSet", _wrap_CreateAGSet},
{"ag::ExistsAGSet", _wrap_ExistsAGSet},
{"ag::DeleteAGSet", _wrap_DeleteAGSet},
{"ag::CreateAG", _wrap_CreateAG},
{"ag::ExistsAG", _wrap_ExistsAG},
{"ag::DeleteAG", _wrap_DeleteAG},
{"ag::GetAGIds", _wrap_GetAGIds},
{"ag::CreateTimeline", _wrap_CreateTimeline},
{"ag::ExistsTimeline", _wrap_ExistsTimeline},
{"ag::DeleteTimeline", _wrap_DeleteTimeline},
{"ag::CreateSignal", _wrap_CreateSignal},
{"ag::ExistsSignal", _wrap_ExistsSignal},
{"ag::DeleteSignal", _wrap_DeleteSignal},
{"ag::GetSignals", _wrap_GetSignals},
{"ag::GetSignalMimeClass", _wrap_GetSignalMimeClass},
{"ag::GetSignalMimeType", _wrap_GetSignalMimeType},
{"ag::GetSignalEncoding", _wrap_GetSignalEncoding},
{"ag::GetSignalXlinkType", _wrap_GetSignalXlinkType},
{"ag::GetSignalXlinkHref", _wrap_GetSignalXlinkHref},
{"ag::GetSignalUnit", _wrap_GetSignalUnit},
{"ag::GetSignalTrack", _wrap_GetSignalTrack},
{"ag::CreateAnnotation", _wrap_CreateAnnotation},
{"ag::ExistsAnnotation", _wrap_ExistsAnnotation},
{"ag::DeleteAnnotation", _wrap_DeleteAnnotation},
{"ag::CopyAnnotation", _wrap_CopyAnnotation},
{"ag::SplitAnnotation", _wrap_SplitAnnotation},
{"ag::NSplitAnnotation", _wrap_NSplitAnnotation},
{"ag::GetAnnotationType", _wrap_GetAnnotationType},
{"ag::GetAnnotationInfo", _wrap_GetAnnotationInfo},
{"ag::GetStartAnchor", _wrap_GetStartAnchor},
{"ag::GetEndAnchor", _wrap_GetEndAnchor},
{"ag::SetStartAnchor", _wrap_SetStartAnchor},
{"ag::SetEndAnchor", _wrap_SetEndAnchor},
{"ag::GetStartOffset", _wrap_GetStartOffset},
{"ag::GetEndOffset", _wrap_GetEndOffset},
{"ag::SetStartOffset", _wrap_SetStartOffset},
{"ag::SetEndOffset", _wrap_SetEndOffset},
{"ag::GetAnnotationTypes", _wrap_GetAnnotationTypes},
{"ag::GetAnnotationFeatureNames", _wrap_GetAnnotationFeatureNames},
{"ag::SetFeature", _wrap_SetFeature},
{"ag::ExistsFeature", _wrap_ExistsFeature},
{"ag::DeleteFeature", _wrap_DeleteFeature},
{"ag::GetFeature", _wrap_GetFeature},
{"ag::UnsetFeature", _wrap_UnsetFeature},
{"ag::GetFeatureNames", _wrap_GetFeatureNames},
{"ag::SetFeatures", _wrap_SetFeatures},
{"ag::GetFeatures", _wrap_GetFeatures},
{"ag::UnsetFeatures", _wrap_UnsetFeatures},
{"ag::CreateAnchor", _wrap_CreateAnchor},
{"ag::ExistsAnchor", _wrap_ExistsAnchor},
{"ag::DeleteAnchor", _wrap_DeleteAnchor},
{"ag::SetAnchorOffset", _wrap_SetAnchorOffset},
{"ag::GetAnchorOffset", _wrap_GetAnchorOffset},
{"ag::SetOffsetUnit", _wrap_SetOffsetUnit},
{"ag::GetOffsetUnit", _wrap_GetOffsetUnit},
{"ag::SetAnchorSignalIds", _wrap_SetAnchorSignalIds},
{"ag::GetAnchorSignalIds", _wrap_GetAnchorSignalIds},
{"ag::GetAnchored", _wrap_GetAnchored},
{"ag::UnsetAnchorOffset", _wrap_UnsetAnchorOffset},
{"ag::SplitAnchor", _wrap_SplitAnchor},
{"ag::GetIncomingAnnotationSet", _wrap_GetIncomingAnnotationSet},
{"ag::GetOutgoingAnnotationSet", _wrap_GetOutgoingAnnotationSet},
{"ag::GetAnchorSet", _wrap_GetAnchorSet},
{"ag::GetAnchorSetByOffset", _wrap_GetAnchorSetByOffset},
{"ag::GetAnchorSetNearestOffset", _wrap_GetAnchorSetNearestOffset},
{"ag::GetAnnotationSet", _wrap_GetAnnotationSet},
{"ag::GetAnnotationSetByFeature", _wrap_GetAnnotationSetByFeature},
{"ag::GetAnnotationSetByOffset", _wrap_GetAnnotationSetByOffset},
{"ag::GetAnnotationSeqByOffset", _wrap_GetAnnotationSeqByOffset},
{"ag::GetAnnotationByOffset", _wrap_GetAnnotationByOffset},
{"ag::GetAGSetId", _wrap_GetAGSetId},
{"ag::GetAGId", _wrap_GetAGId},
{"ag::GetTimelineId", _wrap_GetTimelineId},
{"ag::toXML", _wrap_toXML},
#ifdef AGDB
{"ag::LoadFromDB", _wrap_LoadFromDB},
{"ag::StoreToDB", _wrap_StoreToDB},
{"ag::StoreSQLs", _wrap_StoreSQLs},
#endif
{"ag::SPrecedes", _wrap_SPrecedes},
{"ag::Load", _wrap_Load},
{"ag::Store", _wrap_Store},
{"ag::Store2", _wrap_Store2},
{"ag::CheckAnchorOffsetTotal", _wrap_CheckAnchorOffsetTotal},
{"ag::CheckAnchorOffsetBounded", _wrap_CheckAnchorOffsetBounded},
{"ag::CheckFeatureExists", _wrap_CheckFeatureExists},
{"ag::CheckFeatureIsAnnotationId", _wrap_CheckFeatureIsAnnotationId},
{"ag::CheckLinear", _wrap_CheckLinear},
{"ag::CheckConnected", _wrap_CheckConnected},
{"ag::CheckCoextensive", _wrap_CheckCoextensive},
{"ag::CheckSpan", _wrap_CheckSpan},
{"ag::tree_init_tree", _wrap_tree_init_tree},
{"ag::tree_move_down", _wrap_tree_move_down},
{"ag::tree_move_up", _wrap_tree_move_up},
{"ag::tree_promote_right", _wrap_tree_promote_right},
{"ag::tree_promote_left", _wrap_tree_promote_left},
{"ag::tree_demote_right", _wrap_tree_demote_right},
{"ag::tree_demote_left", _wrap_tree_demote_left},
{"ag::tree_first_tree", _wrap_tree_first_tree},
{"ag::tree_last_tree", _wrap_tree_last_tree},
{"ag::tree_move", _wrap_tree_move},
{"ag::tree_insert_node_left", _wrap_tree_insert_node_left},
{"ag::tree_insert_node_right", _wrap_tree_insert_node_right},
{"ag::tree_delete_node_left", _wrap_tree_delete_node_left},
{"ag::tree_delete_node_right", _wrap_tree_delete_node_right},
{"ag::tree_root", _wrap_tree_root},
{"ag::tree_parent", _wrap_tree_parent},
{"ag::tree_children", _wrap_tree_children},
{"ag::tree_left", _wrap_tree_left},
{"ag::tree_right", _wrap_tree_right},
{"ag::tree_path", _wrap_tree_path},
{"ag::tree_common_ancestor", _wrap_tree_common_ancestor},
{"ag::tree_insert_node", _wrap_tree_insert_node},
{"ag::tree_delete_node", _wrap_tree_delete_node},
{0,0}
};

#ifdef __cplusplus
extern "C"
#endif

XS(SWIG_init) {
    dXSARGS;
    int i;
    static int _init = 0;
    if (!_init) {
        for (i = 0; swig_types_initial[i]; i++) {
            swig_types[i] = SWIG_TypeRegister(swig_types_initial[i]);
        }
        _init = 1;
    }
    
    /* Install commands */
    for (i = 0; swig_commands[i].name; i++) {
        newXS((char*) swig_commands[i].name,swig_commands[i].wrapper, (char*)__FILE__);
    }
    
    /* Install variables */
    for (i = 0; swig_variables[i].name; i++) {
        SV *sv;
        sv = perl_get_sv((char*) swig_variables[i].name, TRUE | 0x2);
        if (swig_variables[i].type) {
            SWIG_MakePtr(sv,(void *)1, *swig_variables[i].type,0);
        }else {
            sv_setiv(sv,(IV) 0);
        }
        swig_create_magic(sv, (char *) swig_variables[i].name, swig_variables[i].set, swig_variables[i].get); 
    }
    
    /* Install constant */
    for (i = 0; swig_constants[i].type; i++) {
        SV *sv;
        sv = perl_get_sv((char*)swig_constants[i].name, TRUE | 0x2);
        switch(swig_constants[i].type) {
            case SWIG_INT:
            sv_setiv(sv, (IV) swig_constants[i].lvalue);
            break;
            case SWIG_FLOAT:
            sv_setnv(sv, (double) swig_constants[i].dvalue);
            break;
            case SWIG_STRING:
            sv_setpv(sv, (char *) swig_constants[i].pvalue);
            break;
            case SWIG_POINTER:
            SWIG_MakePtr(sv, swig_constants[i].pvalue, *(swig_constants[i].ptype),0);
            break;
            case SWIG_BINARY:
            /*      obj = SWIG_NewPackedObj(swig_constants[i].pvalue, swig_constants[i].lvalue, *(swig_constants[i].ptype)); */
            break;
            default:
            break;
        }
        SvREADONLY_on(sv);
    }
    
    ST(0) = &PL_sv_yes;
    XSRETURN(1);
}

