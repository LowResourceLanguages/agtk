// agtree.idl: treebank api definition
// Steven Bird, Scott Cotton, Haejoong Lee
// Copyright (C) 2001-2003 Linguistic Data Consortium, U Penn.
// Web: http://www.ldc.upenn.edu/; Email: ldc@ldc.upenn.edu
// For license information, see the file `LICENSE' included
// with the distribution.

/**
 * @brief Treebank API interface.
 *
 * This is a description of Tree API. In this description, although function
 * signatures are represented in C++ style, it's straightforward to
 * translate them to other languages. C++ programmers should check the
 * exact argument types and return types in agtree.h for some functions
 * return or accept pointer types, and set and list should be distinguished.
 * Java programmers also should check the exact types to use in jag.java
 * for the similar reasons.
 *
 * Here is how functions are represented in this desctiption:
 *
 * <table border="1px"><tr><td><pre>
 * <return type> TreeAPI::<function name> ( <arg list> )
 *
 * <arg list> :=
 *        _empty_string_
 *      | <arg type> <arg name>
 *      | <arg type> <arg name> = <default value>
 *      | <arg type> <arg name> , <arg list>
 *      | <arg list> , <arg type> <arg name> = <default value>
 *
 * <arg type> :=
 *        <base type>
 *      | <compound type>
 *
 * <return type> :=
 *        <base type>
 *      | <compound type>
 *
 * <compound type> :=
 *        sequence< <base type> >
 *      | hash< <base type> , <base type> >
 *
 * <base type> :=
 *        (one of the types listed in typedef statements above)
 *       | bool | int | float | double | string
 * </pre></td></tr></table>
 *
 * <li><tt><default value></tt> is the value assigned to the argument when
 * the argument is not present in the function call.
 * <li><tt>sequence<t1></tt> is a list type, in which elements are
 * of t1 type. 
 * <li><tt>hash<t1,t2></tt> is a hash table type, in which keys are
 * of t1 type and values are t2 type.
 *
 * Here is an example:
 *
 * <table border="1px"><tr><td><pre>
 * AnnotationId
 * TreeAPI::tree_insert_node(
 *         AnnotationId x,
 *         AnnotationId y,
 *         AnnotationType type="syn",
 *         AnnotationId annoId=""
 * )</pre>
 * </td></tr></table>
 *
 * Function tree_insert_node returns an AnnotationId.
 * It takes two AnnotationIds as arguments. AnnotationType can
 * be given optionally. If it is not given, default value for type is
 * `syn'. annoId is also an optional argument. If it is not present,
 * an empty string will be assumed for the value.
 */
interface TreeAPI {

  /// Generic identifier (can be from any of AGSetId, AGId, AnnotationId, TimelineId, SignalId)
  typedef string Id;              
  /// AGSet identifier
  typedef string AGSetId;         
  /// AG identifier
  typedef string AGId;
  /// Annotation identifier
  typedef string AnnotationId;
  /// Annotation type
  typedef string AnnotationType;
  /// Anchor identifier
  typedef string AnchorId;
  /// Timeline identifier
  typedef string TimelineId;
  /// Signal identifier
  typedef string SignalId;
  /// feature name
  typedef string FeatureName;
  /// feature value
  typedef string FeatureValue;
  /// a uniform resource identifier
  typedef string URI;
  /// the MIME class
  typedef string MimeClass;
  /// the MIME type
  typedef string MimeType;
  /// the signal encoding
  typedef string Encoding;
  /// the unit for offsets
  typedef string Unit;
  /// the offset into a signal
  typedef double Offset;
  /// the track of a signal
  typedef string Track;


/// Create an empty tree, a tree with only one node.
/**
 * @param type
 *    Type of the annotation (node) to be created.
 * @param id
 *    Agset, ag or annotation id.  It's an error to give an id of
 *    an existing annotation.  If the specified ag already exists,
 *    new annotation will be attached to the last annotation in
 *    the ag.  If objects (agset, ag, annotation) specified in the
 *    id don't exist, appropriate objects will be created.
 * @return
 *    Id of created annotation (node) upon success.
 */
AnnotationId
tree_init_tree(AnnotationType type, Id id="AGTree");

/// Move the given node down, creating a new node above it.
/**
 * @param anno
 *    Id of the annotation (node) to be moved.
 * @param type
 *    Type of the newly created annotation (node).
 * @param new_anno
 *    Specifies the id of created annotation.
 * @return
 *    true on success, false on fail
 */
bool
tree_move_down(AnnotationId anno,
	       AnnotationType type="syn",
	       AnnotationId new_anno="");

/// Move the given node up, deleting the parent node.
/**
 * @param anno
 *    Id of the annotation (node) to be moved.  The node must be
 *    an only child.  Otherwise the operation fails.
 * @return
 *    true on success, false on fail
 */
bool
tree_move_up(AnnotationId anno);

/// Make the given node a right sibling of parent node.
/**
 * @param anno
 *    Id of the annotation (node) to be moved.  The node must be
 *    the rightmost child, and it can't be an only child.  Otherwise
 *    the operation fails.
 * @return
 *    true on success, false on fail
 */
bool
tree_promote_right(AnnotationId anno);

/// Make the given node a left sibling of parent node.
/**
 * @param anno
 *    Id of the annotation (node) to be moved.  The node must be
 *    the leftmost child, and it can't be an only child.  Otherwise
 *    the operation fails.
 * @return
 *    true on success, false on fail
 */
bool
tree_promote_left(AnnotationId anno);

/// Make the given node a rightmost child of the left sibling.
/**
 * @param anno
 *    Id of the annotation (node) to be moved.  The node must
 *    have a left sibling.  Otherwise the operation fails.
 * @return
 *    true on success, false on fail
 */ 
bool
tree_demote_right(AnnotationId anno);

/// Make the given node a leftmost child of the right sibling.
/**
 * @param anno
 *    Id of the annotation (node) to be moved.  The node must
 *    have a right sibling.  Otherwise the operation fails.
 * @return
 *    true on success, false on fail
 */
bool
tree_demote_left(AnnotationId anno);

/// Find the first tree (root) in a given annotation graph.
/**
 * @param agId
 *    Id of an annotation graph.
 * @return
 *    The id of the root node of the first tree in the annotation graph.
 */
AnnotationId
tree_first_tree(AGId agId);

/// Find the last tree (root) in a given annotation graph.
/**
 * @param agId
 *    Id of an annotation graph.
 * @return
 *    The id of the root node of the last tree in the annotation graph.
 */
AnnotationId
tree_last_tree(AGId agId);

/// Move a subtree under a certain node
/**
 * @param x
 *    Id of the annotation (node) to be moved.  Actually
 *    the subtree rooted at x is moved.  x must be a leftmost
 *    or rightmost child, and can't be an only child.
 * @param y
 *    x is moved under y.  x should be able to reach under y
 *    by some promote and demote operations.
 * @return
 *    true on success, false on fail
 */
bool
tree_move(AnnotationId x, AnnotationId y);

/// Insert a new terminal node on the left.
/**
 * @param x
 *    Id of the annotation (node) on the left of which the
 *    new node is inserted.  x itself should be a terminal
 *    node.
 * @param type
 *    Type of the new annotation (node).
 * @param annoId
 *    Specifies the id of the new annotation (node).
 * @return
 *    Id of the new annotation (node).
 */
AnnotationId
tree_insert_node_left(AnnotationId x,
		      AnnotationType type="wrd",
		      AnnotationId annoId="");

/// Insert a new terminal node on the right.
/**
 * @param x
 *    Id of the annotation (node) on the right of which the
 *    new node is inserted.  x itself should be a terminal
 *    node.
 * @param type
 *    Type of the new annotation (node).
 * @param annoId
 *    Specifies the id of the new annotation (node).
 * @return
 *    Id of the new annotation (node).
 */
AnnotationId
tree_insert_node_right(AnnotationId x,
		       AnnotationType type="wrd",
		       AnnotationId annoId="");

/// Delete a node on the left.
/**
 * @param x
 *    Id of the annotation (node) whose left sibling is deleted.
 *    x must be a terminal node.
 * @return
 *    true on success, false on fail.
 */
bool
tree_delete_node_left(AnnotationId x);

/// Delete a node on the left.
/**
 * @param x
 *    Id of the annotation (node) whose right sibling is deleted.
 *    x must be a terminal node.
 * @return
 *    true on success, false on fail.
 */
bool
tree_delete_node_right(AnnotationId x);

/// Find the root node.
/**
 * @param x
 *    Id of an annotation (node).  The root of the tree with x will
 *    be searched.
 * @param depth
 *    A positive integer.  Suppose a path from the root to x.
 *    Then the (depth+1)th node in the path will be returned.
 *    This is useful when the root of a sentence and the root
 *    of the tree are different.
 * @return
 *    Id of the root annotation (node).
 */
AnnotationId
tree_root(AnnotationId x, int depth=1);

/// Find the parent node.
/**
 * @param x
 *    Id of an annotation (node) whose parent will be searched.
 * @return
 *    Id of the parent annotation (node).
 */
AnnotationId
tree_parent(AnnotationId x);

/// Find children.
/**
 * @param x
 *    Id of an annotation (node) whose children will be searched.
 * @return
 *    A list of children from the leftmost to the rightmost child.
 */
sequence<AnnotationId>
tree_children(AnnotationId x);

/// Find a left sibling.
/**
 * @param x
 *    Id of an annotation (node) whose left sibling will be searched.
 * @return
 *    Id of the left sibling.
 */
AnnotationId
tree_left(AnnotationId x);

/// Find a right sibling
/**
 * @param x
 *    Id of an annotation (node) whose right sibling will be searched.
 * @return
 *    Id of the right sibling.
 */
AnnotationId
tree_right(AnnotationId x);

/// Find a path from the root to the given node.
/**
 * @param x
 *    An annotation (node) id.  The function finds the path from the root
 *    to x.
 * @return
 *    A list of annotations (nodes) in the path from the root.
 */
sequence<AnnotationId>
tree_path(AnnotationId x);

/// Find the nearest common ancestor of the two nodes.
/**
 * @param x, y
 *    Annotation (node) ids.
 * @return
 *    Id of the nearest common ancestor of x and y.
 */
AnnotationId
tree_common_ancestor(AnnotationId x, AnnotationId y);

/// Insert a non-terminal node.
/**
 * @param x, y
 *    Ids of annotations (nodes) which are children of a node.
 *    It's an error that y precedes x.  A non-terminal will be added
 *    in the following way.  x is moved down, creating a non-terminal x'.
 *    All nodes which are right siblings of x, and left siblings of y,
 *    including y, become the children of x'.
 * @param type
 *    Type of newly created annotation (node).
 * @param annoId
 *    Specifies the id of newly created annotation (node).
 * @return
 *    Id of the newly created node.
 */
AnnotationId
tree_insert_node(AnnotationId x,
                 AnnotationId y,
                 AnnotationType type="syn",
                 AnnotationId annoId="");

/// Delete a non-terminal node.
/**
 * @param x
 *    Id of an annotation (node) to be deleted.
 * @returns
 *    true on success, false on fail.
 */
bool
tree_delete_node(AnnotationId x);

}
